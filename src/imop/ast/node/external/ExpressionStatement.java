/*
 * Copyright (c) 2019 Aman Nougrahiya, V Krishna Nandivada, IIT Madras.
 * This file is a part of the project IMOP, licensed under the MIT license.
 * See LICENSE.md for the full text of the license.
 * 
 * The above notice shall be included in all copies or substantial
 * portions of this file.
 */
//
// Generated by JTB 1.3.2
//

package imop.ast.node.external;

import imop.ast.info.cfgNodeInfo.ExpressionStatementInfo;
import imop.ast.node.internal.*;
import imop.lib.getter.CallStatementGetter;

/**
 * Grammar production:
 * f0 ::= ( Expression() )?
 * f1 ::= ";"
 */
public class ExpressionStatement extends Statement {
	{
		classId = 2859;
	}

	/**
	 * 
	 */
	private static final long serialVersionUID = -4610406713281587887L;
	private NodeOptional f0;
	private NodeToken f1;

	// To be used by the factory methods of this class.
	public ExpressionStatement() {
	}

	/**
	 * May return an object of dynamic type {@link CallStatement}, or
	 * {@link ExpressionStatement}.
	 * 
	 * @param n0
	 * @return
	 *         an object of type {@link CallStatement}, if this
	 *         expression-statement represents a call. Otherwise, a simple
	 *         {@link ExpressionStatement} object is returned.
	 */
	public static Statement getExpressionStatementOrCallStatement(NodeOptional n0) {
		return ExpressionStatement.getExpressionStatementOrCallStatement(n0, new NodeToken(";"));
	}

	/**
	 * May return an object of dynamic type {@link CallStatement}, or
	 * {@link ExpressionStatement}.
	 * 
	 * @param n0
	 * @param n1
	 * @return
	 *         an object of type {@link CallStatement}, if this
	 *         expression-statement represents a call. Otherwise, a simple
	 *         {@link ExpressionStatement} object is returned.
	 */
	public static Statement getExpressionStatementOrCallStatement(NodeOptional n0, NodeToken n1) {
		Expression exp = (Expression) n0.getNode();
		Statement stmt = null;
		if (exp != null) {
			stmt = CallStatementGetter.getCallIfAny(exp);
		}
		if (stmt != null) {
			return stmt;
		} else {
			ExpressionStatement expStmt = new ExpressionStatement();
			n0.setParent(expStmt);
			n1.setParent(expStmt);
			expStmt.setF0(n0);
			expStmt.setF1(n1);
			return expStmt;
		}
	}

	@Override
	public boolean isKnownCFGNode() {
		return true;
	}

	@Override
	public boolean isKnownCFGLeafNode() {
		return true;
	}

	@Override
	public ExpressionStatementInfo getInfo() {
		if (info == null) {
			info = new ExpressionStatementInfo(this);
		}
		return (ExpressionStatementInfo) info;
	}

	@Override
	public void accept(imop.baseVisitor.Visitor v) {
		v.visit(this);
	}

	@Override
	public <R, A> R accept(imop.baseVisitor.GJVisitor<R, A> v, A argu) {
		return v.visit(this, argu);
	}

	@Override
	public <R> R accept(imop.baseVisitor.GJNoArguVisitor<R> v) {
		return v.visit(this);
	}

	@Override
	public <A> void accept(imop.baseVisitor.GJVoidVisitor<A> v, A argu) {
		v.visit(this, argu);
	}

	public NodeOptional getF0() {
		return f0;
	}

	public void setF0(NodeOptional f0) {
		f0.setParent(this);
		this.f0 = f0;
	}

	public NodeToken getF1() {
		return f1;
	}

	public void setF1(NodeToken f1) {
		f1.setParent(this);
		this.f1 = f1;
	}
}
