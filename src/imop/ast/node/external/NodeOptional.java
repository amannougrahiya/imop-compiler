/*
 * Copyright (c) 2019 Aman Nougrahiya, V Krishna Nandivada, IIT Madras.
 * This file is a part of the project IMOP, licensed under the MIT license.
 * See LICENSE.md for the full text of the license.
 * 
 * The above notice shall be included in all copies or substantial
 * portions of this file.
 */
//
// Generated by JTB 1.3.2
//

package imop.ast.node.external;

/**
 * Represents an grammar optional node, e.g. ( A )? or [ A ]
 */
public class NodeOptional extends Node {
	{
		classId = 503;
	}

	/**
	 * 
	 */
	private static final long serialVersionUID = -4970146107937147720L;

	private Node node;

	public NodeOptional() {
		setNode(null);
	}

	public NodeOptional(Node n) {
		if (n == null) {
			setNode(null);
		} else {
			addNode(n);
		}
	}

	public void addNode(Node n) {
		if (getNode() != null) {
			throw new Error("Attempt to set optional node twice");
		}

		n.setParent(this);
		setNode(n);
	}

	@Override
	public void accept(imop.baseVisitor.Visitor v) {
		v.visit(this);
	}

	@Override
	public <R, A> R accept(imop.baseVisitor.GJVisitor<R, A> v, A argu) {
		return v.visit(this, argu);
	}

	@Override
	public <R> R accept(imop.baseVisitor.GJNoArguVisitor<R> v) {
		return v.visit(this);
	}

	@Override
	public <A> void accept(imop.baseVisitor.GJVoidVisitor<A> v, A argu) {
		v.visit(this, argu);
	}

	public boolean present() {
		return getNode() != null;
	}

	public Node getNode() {
		return node;
	}

	public void setNode(Node node) {
		if (node != null) {
			node.setParent(this);
		}
		this.node = node;
	}
}
