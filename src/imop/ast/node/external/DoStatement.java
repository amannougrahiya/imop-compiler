/*
 * Copyright (c) 2019 Aman Nougrahiya, V Krishna Nandivada, IIT Madras.
 * This file is a part of the project IMOP, licensed under the MIT license.
 * See LICENSE.md for the full text of the license.
 * 
 * The above notice shall be included in all copies or substantial
 * portions of this file.
 */
//
// Generated by JTB 1.3.2
//

package imop.ast.node.external;

import imop.ast.info.cfgNodeInfo.DoStatementInfo;

/**
 * Grammar production:
 * f0 ::= <DO>
 * f1 ::= Statement()
 * f2 ::= <WHILE>
 * f3 ::= "("
 * f4 ::= Expression()
 * f5 ::= ")"
 * f6 ::= ";"
 */
public class DoStatement extends IterationStatement {
	{
		classId = 14115;
	}

	public DoStatement() {
	}

	/**
	 * 
	 */
	private static final long serialVersionUID = -7369802429734141850L;
	private NodeToken f0;
	private Statement f1;
	private NodeToken f2;
	private NodeToken f3;
	private Expression f4;
	private NodeToken f5;
	private NodeToken f6;

	public DoStatement(NodeToken n0, Statement n1, NodeToken n2, NodeToken n3, Expression n4, NodeToken n5,
			NodeToken n6) {
		n0.setParent(this);
		n1.setParent(this);
		n2.setParent(this);
		n3.setParent(this);
		n4.setParent(this);
		n5.setParent(this);
		n6.setParent(this);
		setF0(n0);
		setF1(n1);
		setF2(n2);
		setF3(n3);
		setF4(n4);
		setF5(n5);
		setF6(n6);
	}

	public DoStatement(Statement n0, Expression n1) {
		n0.setParent(this);
		n1.setParent(this);
		setF0(new NodeToken("do"));
		getF0().setParent(this);
		setF1(n0);
		setF2(new NodeToken("while"));
		getF2().setParent(this);
		setF3(new NodeToken("("));
		getF3().setParent(this);
		setF4(n1);
		setF5(new NodeToken(")"));
		getF5().setParent(this);
		setF6(new NodeToken(";"));
		getF6().setParent(this);
	}

	@Override
	public boolean isKnownCFGNode() {
		return true;
	}

	@Override
	public boolean isKnownCFGLeafNode() {
		return false;
	}

	@Override
	public DoStatementInfo getInfo() {
		if (info == null) {
			info = new DoStatementInfo(this);
		}
		return (DoStatementInfo) info;
	}

	@Override
	public void accept(imop.baseVisitor.Visitor v) {
		v.visit(this);
	}

	@Override
	public <R, A> R accept(imop.baseVisitor.GJVisitor<R, A> v, A argu) {
		return v.visit(this, argu);
	}

	@Override
	public <R> R accept(imop.baseVisitor.GJNoArguVisitor<R> v) {
		return v.visit(this);
	}

	@Override
	public <A> void accept(imop.baseVisitor.GJVoidVisitor<A> v, A argu) {
		v.visit(this, argu);
	}

	public NodeToken getF0() {
		return f0;
	}

	public void setF0(NodeToken f0) {
		f0.setParent(this);
		this.f0 = f0;
	}

	public Statement getF1() {
		return f1;
	}

	public void setF1(Statement f1) {
		f1.setParent(this);
		this.f1 = f1;
	}

	public NodeToken getF2() {
		return f2;
	}

	public void setF2(NodeToken f2) {
		f2.setParent(this);
		this.f2 = f2;
	}

	public NodeToken getF3() {
		return f3;
	}

	public void setF3(NodeToken f3) {
		f3.setParent(this);
		this.f3 = f3;
	}

	public Expression getF4() {
		return f4;
	}

	public void setF4(Expression f4) {
		f4.setParent(this);
		this.f4 = f4;
	}

	public NodeToken getF5() {
		return f5;
	}

	public void setF5(NodeToken f5) {
		f5.setParent(this);
		this.f5 = f5;
	}

	public NodeToken getF6() {
		return f6;
	}

	public void setF6(NodeToken f6) {
		f6.setParent(this);
		this.f6 = f6;
	}
}
