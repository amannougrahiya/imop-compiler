/*
 * Copyright (c) 2019 Aman Nougrahiya, V Krishna Nandivada, IIT Madras.
 * This file is a part of the project IMOP, licensed under the MIT license.
 * See LICENSE.md for the full text of the license.
 * 
 * The above notice shall be included in all copies or substantial
 * portions of this file.
 */
//
// Generated by JTB 1.3.2
//

package imop.ast.node.external;

import imop.lib.getter.StringGetter;
import imop.parser.Program;

/**
 * Represents a single token in the grammar. If the "-tk" option
 * is used, also contains a Vector of preceding special tokens.
 */
public class NodeToken extends Node {
	{
		classId = 499;
	}

	public NodeToken() {
	}

	/**
	 * 
	 */
	private static final long serialVersionUID = 7978089197614061724L;

	private String tokenImage;

	// Stores a list of NodeTokens
	// private Vector<NodeToken> specialTokens;

	private int lineNum = -1;
	private int columnNum = -1;

	// Equal to the JavaCC token "kind" integer.
	// -1 if not available.
	private int kind;

	public NodeToken(String s) {
		this(s, -1, -1, -1, -1, -1);
	}

	public NodeToken(String s, int kind, int beginLine, int beginColumn, int endLine, int endColumn) {
		setTokenImage(s);
		this.setKind(kind);
		this.setBeginLine(beginLine);
		this.setBeginColumn(beginColumn);
		this.setEndLine(endLine);
		this.setEndColumn(endColumn);
	}

	// public NodeToken getSpecialAt(int i) {
	// if (getSpecialTokens() == null) {
	// throw new java.util.NoSuchElementException("No specials in token");
	// }
	// return getSpecialTokens().elementAt(i);
	// }
	//
	// public int numSpecials() {
	// if (getSpecialTokens() == null) {
	// return 0;
	// }
	// return getSpecialTokens().size();
	// }
	//
	// public void addSpecial(NodeToken s) {
	// if (getSpecialTokens() == null) {
	// setSpecialTokens(new Vector<>());
	// }
	// getSpecialTokens().addElement(s);
	// }
	//
	// public void trimSpecials() {
	// if (getSpecialTokens() == null) {
	// return;
	// }
	// getSpecialTokens().trimToSize();
	// }
	// public String withSpecials() {
	// if (getSpecialTokens() == null) {
	// return getTokenImage();
	// }
	//
	// StringBuffer buf = new StringBuffer();
	//
	// for (Enumeration<NodeToken> e = getSpecialTokens().elements();
	// e.hasMoreElements();) {
	// buf.append(e.nextElement().toString());
	// }
	//
	// buf.append(getTokenImage());
	// return buf.toString();
	// }

	@Override
	public String toString() {
		return getTokenImage();
	}

	@Override
	public void accept(imop.baseVisitor.Visitor v) {
		v.visit(this);
	}

	@Override
	public <R, A> R accept(imop.baseVisitor.GJVisitor<R, A> v, A argu) {
		return v.visit(this, argu);
	}

	@Override
	public <R> R accept(imop.baseVisitor.GJNoArguVisitor<R> v) {
		return v.visit(this);
	}

	@Override
	public <A> void accept(imop.baseVisitor.GJVoidVisitor<A> v, A argu) {
		v.visit(this, argu);
	}

	public String getTokenImage() {
		return tokenImage;
	}

	public void setTokenImage(String tokenImage) {
		this.tokenImage = tokenImage;
	}

	// public Vector<NodeToken> getSpecialTokens() {
	// return specialTokens;
	// }
	//
	// public void setSpecialTokens(Vector<NodeToken> specialTokens) {
	// this.specialTokens = specialTokens;
	// }

	public int getKind() {
		return kind;
	}

	public void setKind(int kind) {
		this.kind = kind;
	}

	public int getLineNum() {
		if (lineNum == -1 || Program.invalidLineNum) {
			Program.getRoot().accept(new StringGetter.Positioner());
			Program.invalidLineNum = false;
		}
		return lineNum;
	}

	public void setLineNum(int lineNum) {
		this.lineNum = lineNum;
	}

	public int getColumnNum() {
		if (columnNum == -1 || Program.invalidColumnNum) {
			Program.getRoot().accept(new StringGetter.Positioner());
			Program.invalidColumnNum = false;
		}
		return columnNum;
	}

	public void setColumnNum(int columnNum) {
		this.columnNum = columnNum;
	}

	// -1 for these ints means no position info is available.
	@Deprecated
	private int beginLine;

	@Deprecated
	private int beginColumn;

	@Deprecated
	private int endLine;

	@Deprecated
	private int endColumn;

	@Deprecated
	public int getBeginLine() {
		return beginLine;
	}

	@Deprecated
	public void setBeginLine(int beginLine) {
		this.beginLine = beginLine;
	}

	@Deprecated
	public int getBeginColumn() {
		return beginColumn;
	}

	@Deprecated
	public void setBeginColumn(int beginColumn) {
		this.beginColumn = beginColumn;
	}

	@Deprecated
	public int getEndLine() {
		return endLine;
	}

	@Deprecated
	public void setEndLine(int endLine) {
		this.endLine = endLine;
	}

	@Deprecated
	public int getEndColumn() {
		return endColumn;
	}

	@Deprecated
	public void setEndColumn(int endColumn) {
		this.endColumn = endColumn;
	}
}
