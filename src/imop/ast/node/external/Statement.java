/*
 * Copyright (c) 2019 Aman Nougrahiya, V Krishna Nandivada, IIT Madras.
 * This file is a part of the project IMOP, licensed under the MIT license.
 * See LICENSE.md for the full text of the license.
 * 
 * The above notice shall be included in all copies or substantial
 * portions of this file.
 */
//
// Generated by JTB 1.3.2
//

package imop.ast.node.external;

import imop.ast.info.StatementInfo;
import imop.lib.transform.simplify.LabelRemover;

/**
 * Grammar production:
 * f0 ::= LabeledStatement()
 * | ExpressionStatement()
 * | CallStatement()
 * | FunctionCall()
 * | MessageSend()
 * | CompoundStatement()
 * | SelectionStatement()
 * | IterationStatement()
 * | JumpStatement()
 * | UnknownPragma()
 * | OmpConstruct()
 * | OmpDirective()
 * | UnknownCpp() )
 */
public class Statement extends Node {
	{
		classId = 3;
	}

	/**
	 * 
	 */
	private static final long serialVersionUID = -2115984190708030254L;
	private NodeChoice stmtF0;

	public Statement(NodeChoice n0) {
		n0.setParent(this);
		setStmtF0(n0);
		// Old code: Not required here. This code has been shifted to setStmtF0,
		// already.
		// if (getStmtF0().getChoice() instanceof LabeledStatement) {
		// LabelRemover.populateLabelAnnotations(this);
		// }
	}

	public Statement() {
		// This constructor shall be used only when called from the constructors of
		// subclasses of Statement
	}

	@Override
	public StatementInfo getInfo() {
		if (info == null) {
			info = new StatementInfo(this);
		}
		return (StatementInfo) info;
	}

	@Override
	public void accept(imop.baseVisitor.Visitor v) {
		v.visit(this);
	}

	@Override
	public <R, A> R accept(imop.baseVisitor.GJVisitor<R, A> v, A argu) {
		return v.visit(this, argu);
	}

	@Override
	public <R> R accept(imop.baseVisitor.GJNoArguVisitor<R> v) {
		return v.visit(this);
	}

	@Override
	public <A> void accept(imop.baseVisitor.GJVoidVisitor<A> v, A argu) {
		v.visit(this, argu);
	}

	public NodeChoice getStmtF0() {
		return stmtF0;
	}

	public void setStmtF0(NodeChoice stmtF0) {
		stmtF0.setParent(this);
		this.stmtF0 = stmtF0;
		if (stmtF0.getChoice() instanceof LabeledStatement) {
			LabelRemover.populateLabelAnnotations(this);
		}
	}
}
