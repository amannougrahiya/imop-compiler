/*
 * Copyright (c) 2019 Aman Nougrahiya, V Krishna Nandivada, IIT Madras.
 * This file is a part of the project IMOP, licensed under the MIT license.
 * See LICENSE.md for the full text of the license.
 * 
 * The above notice shall be included in all copies or substantial
 * portions of this file.
 */
/* Generated By:JavaCC: Do not edit this line. CParserTokenManager.java */
package imop.parser;

/** Token Manager. */
public class CParserTokenManager implements CParserConstants {
	int attributeMatchingParens;

	/** Debug output. */
	public java.io.PrintStream debugStream = System.out;

	/** Set debug output. */
	public void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1) {
		switch (pos) {
		case 0:
			if ((active1 & 0x8000000002L) != 0L) {
				return 5;
			}
			if ((active1 & 0x10000100L) != 0L) {
				return 68;
			}
			if ((active0 & 0x4004000000L) != 0L) {
				jjmatchedKind = 180;
				return 38;
			}
			if ((active0 & 0x3fffffbe13080000L) != 0L) {
				jjmatchedKind = 180;
				return 42;
			}
			if ((active0 & 0xc0000001e8070000L) != 0L || (active1 & 0x1L) != 0L) {
				jjmatchedKind = 180;
				return 29;
			}
			return -1;
		case 1:
			if ((active0 & 0xa7ffffae13080000L) != 0L || (active1 & 0x1L) != 0L) {
				if (jjmatchedPos != 1) {
					jjmatchedKind = 180;
					jjmatchedPos = 1;
				}
				return 42;
			}
			if ((active0 & 0x40000001e8070000L) != 0L) {
				if (jjmatchedPos != 1) {
					jjmatchedKind = 180;
					jjmatchedPos = 1;
				}
				return 79;
			}
			if ((active0 & 0x4004000000L) != 0L) {
				if (jjmatchedPos != 1) {
					jjmatchedKind = 180;
					jjmatchedPos = 1;
				}
				return 37;
			}
			if ((active0 & 0x1800001000000000L) != 0L) {
				return 42;
			}
			return -1;
		case 2:
			if ((active0 & 0xe1ffffffff070000L) != 0L || (active1 & 0x1L) != 0L) {
				jjmatchedKind = 180;
				jjmatchedPos = 2;
				return 42;
			}
			if ((active0 & 0x600000000080000L) != 0L) {
				return 42;
			}
			return -1;
		case 3:
			if ((active0 & 0x1fe000000000000L) != 0L) {
				return 42;
			}
			if ((active0 & 0xe001ffffff070000L) != 0L || (active1 & 0x1L) != 0L) {
				jjmatchedKind = 180;
				jjmatchedPos = 3;
				return 42;
			}
			return -1;
		case 4:
			if ((active0 & 0xe00007ffff010000L) != 0L || (active1 & 0x1L) != 0L) {
				if (jjmatchedPos != 4) {
					jjmatchedKind = 180;
					jjmatchedPos = 4;
				}
				return 42;
			}
			if ((active0 & 0x1f80000060000L) != 0L) {
				return 42;
			}
			return -1;
		case 5:
			if ((active0 & 0xc000000fef050000L) != 0L || (active1 & 0x1L) != 0L) {
				jjmatchedKind = 180;
				jjmatchedPos = 5;
				return 42;
			}
			if ((active0 & 0x200007f010000000L) != 0L) {
				return 42;
			}
			return -1;
		case 6:
			if ((active0 & 0x40000003e7010000L) != 0L || (active1 & 0x1L) != 0L) {
				jjmatchedKind = 180;
				jjmatchedPos = 6;
				return 42;
			}
			if ((active0 & 0x8000000c08040000L) != 0L) {
				return 42;
			}
			return -1;
		case 7:
			if ((active0 & 0x4000000000010000L) != 0L) {
				if (jjmatchedPos != 7) {
					jjmatchedKind = 180;
					jjmatchedPos = 7;
				}
				return 42;
			}
			if ((active0 & 0x3e7000000L) != 0L || (active1 & 0x1L) != 0L) {
				return 42;
			}
			return -1;
		case 8:
			if ((active0 & 0x4000000140010000L) != 0L) {
				jjmatchedKind = 180;
				jjmatchedPos = 8;
				return 42;
			}
			return -1;
		case 9:
			if ((active0 & 0x4000000000010000L) != 0L) {
				jjmatchedKind = 180;
				jjmatchedPos = 9;
				return 42;
			}
			if ((active0 & 0x140000000L) != 0L) {
				return 42;
			}
			return -1;
		case 10:
			if ((active0 & 0x4000000000010000L) != 0L) {
				jjmatchedKind = 180;
				jjmatchedPos = 10;
				return 42;
			}
			return -1;
		case 11:
			if ((active0 & 0x4000000000010000L) != 0L) {
				jjmatchedKind = 180;
				jjmatchedPos = 11;
				return 42;
			}
			return -1;
		default:
			return -1;
		}
	}

	private final int jjStartNfa_0(int pos, long active0, long active1) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
	}

	private int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	private int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 33:
			jjmatchedKind = 98;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
		case 35:
			return jjStopAtPos(0, 111);
		case 37:
			jjmatchedKind = 93;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
		case 38:
			jjmatchedKind = 95;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x1020L);
		case 40:
			return jjStopAtPos(0, 104);
		case 41:
			return jjStopAtPos(0, 105);
		case 42:
			jjmatchedKind = 91;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
		case 43:
			jjmatchedKind = 89;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x200400L);
		case 44:
			return jjStopAtPos(0, 110);
		case 45:
			jjmatchedKind = 90;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x500800L);
		case 46:
			jjmatchedKind = 103;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
		case 47:
			jjmatchedKind = 92;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
		case 58:
			return jjStopAtPos(0, 100);
		case 59:
			return jjStopAtPos(0, 101);
		case 60:
			jjmatchedKind = 88;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x88004L);
		case 61:
			jjmatchedKind = 94;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
		case 62:
			jjmatchedKind = 87;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x50008L);
		case 63:
			return jjStopAtPos(0, 102);
		case 91:
			return jjStopAtPos(0, 106);
		case 93:
			return jjStopAtPos(0, 107);
		case 94:
			jjmatchedKind = 97;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
		case 95:
			return jjMoveStringLiteralDfa1_0(0xc0000001e8070000L, 0x1L);
		case 97:
			return jjMoveStringLiteralDfa1_0(0x20000000080000L, 0x0L);
		case 98:
			return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
		case 99:
			return jjMoveStringLiteralDfa1_0(0x84400001000000L, 0x0L);
		case 100:
			return jjMoveStringLiteralDfa1_0(0x1000001800000000L, 0x0L);
		case 101:
			return jjMoveStringLiteralDfa1_0(0x12008000000000L, 0x0L);
		case 102:
			return jjMoveStringLiteralDfa1_0(0x200800000000000L, 0x0L);
		case 103:
			return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
		case 105:
			return jjMoveStringLiteralDfa1_0(0xc00000010000000L, 0x0L);
		case 108:
			return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
		case 114:
			return jjMoveStringLiteralDfa1_0(0x4004000000L, 0x0L);
		case 115:
			return jjMoveStringLiteralDfa1_0(0x2001072000000000L, 0x0L);
		case 116:
			return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
		case 117:
			return jjMoveStringLiteralDfa1_0(0x200200000000L, 0x0L);
		case 118:
			return jjMoveStringLiteralDfa1_0(0x40000002000000L, 0x0L);
		case 119:
			return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
		case 123:
			return jjStopAtPos(0, 108);
		case 124:
			jjmatchedKind = 96;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x4040L);
		case 125:
			return jjStopAtPos(0, 109);
		case 126:
			return jjStopAtPos(0, 99);
		default:
			return jjMoveNfa_0(0, 0);
		}
	}

	private int jjMoveStringLiteralDfa1_0(long active0, long active1) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0, active1);
			return 1;
		}
		switch (curChar) {
		case 38:
			if ((active1 & 0x20L) != 0L) {
				return jjStopAtPos(1, 69);
			}
			break;
		case 43:
			if ((active1 & 0x200000L) != 0L) {
				return jjStopAtPos(1, 85);
			}
			break;
		case 45:
			if ((active1 & 0x400000L) != 0L) {
				return jjStopAtPos(1, 86);
			}
			break;
		case 46:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L);
		case 60:
			if ((active1 & 0x8000L) != 0L) {
				jjmatchedKind = 79;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L);
		case 61:
			if ((active1 & 0x10L) != 0L) {
				return jjStopAtPos(1, 68);
			} else if ((active1 & 0x80L) != 0L) {
				return jjStopAtPos(1, 71);
			} else if ((active1 & 0x100L) != 0L) {
				return jjStopAtPos(1, 72);
			} else if ((active1 & 0x200L) != 0L) {
				return jjStopAtPos(1, 73);
			} else if ((active1 & 0x400L) != 0L) {
				return jjStopAtPos(1, 74);
			} else if ((active1 & 0x800L) != 0L) {
				return jjStopAtPos(1, 75);
			} else if ((active1 & 0x1000L) != 0L) {
				return jjStopAtPos(1, 76);
			} else if ((active1 & 0x2000L) != 0L) {
				return jjStopAtPos(1, 77);
			} else if ((active1 & 0x4000L) != 0L) {
				return jjStopAtPos(1, 78);
			} else if ((active1 & 0x20000L) != 0L) {
				return jjStopAtPos(1, 81);
			} else if ((active1 & 0x40000L) != 0L) {
				return jjStopAtPos(1, 82);
			} else if ((active1 & 0x80000L) != 0L) {
				return jjStopAtPos(1, 83);
			}
			break;
		case 62:
			if ((active1 & 0x10000L) != 0L) {
				jjmatchedKind = 80;
				jjmatchedPos = 1;
			} else if ((active1 & 0x100000L) != 0L) {
				return jjStopAtPos(1, 84);
			}
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L);
		case 65:
			return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L);
		case 67:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
		case 95:
			return jjMoveStringLiteralDfa2_0(active0, 0x40000001e8070000L, active1, 0L);
		case 97:
			return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L);
		case 101:
			return jjMoveStringLiteralDfa2_0(active0, 0x4804000000L, active1, 0L);
		case 102:
			if ((active0 & 0x800000000000000L) != 0L) {
				return jjStartNfaWithStates_0(1, 59, 42);
			}
			break;
		case 104:
			return jjMoveStringLiteralDfa2_0(active0, 0x81080000000000L, active1, 0L);
		case 105:
			return jjMoveStringLiteralDfa2_0(active0, 0x2000040000000000L, active1, 0L);
		case 108:
			return jjMoveStringLiteralDfa2_0(active0, 0x2800000000000L, active1, 0L);
		case 110:
			return jjMoveStringLiteralDfa2_0(active0, 0x410200210000000L, active1, 0L);
		case 111:
			if ((active0 & 0x1000000000000000L) != 0L) {
				jjmatchedKind = 60;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x348401003000000L, active1, 0L);
		case 114:
			return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
		case 115:
			return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
		case 116:
			return jjMoveStringLiteralDfa2_0(active0, 0x30000000000L, active1, 0L);
		case 117:
			return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
		case 119:
			return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
		case 120:
			return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
		case 121:
			return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
		case 124:
			if ((active1 & 0x40L) != 0L) {
				return jjStopAtPos(1, 70);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_0(0, active0, active1);
	}

	private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) {
			return jjStartNfa_0(0, old0, old1);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0, active1);
			return 2;
		}
		switch (curChar) {
		case 46:
			if ((active1 & 0x2L) != 0L) {
				return jjStopAtPos(2, 65);
			}
			break;
		case 61:
			if ((active1 & 0x4L) != 0L) {
				return jjStopAtPos(2, 66);
			} else if ((active1 & 0x8L) != 0L) {
				return jjStopAtPos(2, 67);
			}
			break;
		case 97:
			return jjMoveStringLiteralDfa3_0(active0, 0x80020000070000L, active1, 0L);
		case 99:
			return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0L);
		case 101:
			return jjMoveStringLiteralDfa3_0(active0, 0x4000100000000000L, active1, 0L);
		case 102:
			return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
		case 103:
			return jjMoveStringLiteralDfa3_0(active0, 0x40004000000L, active1, 0L);
		case 105:
			return jjMoveStringLiteralDfa3_0(active0, 0x40282060000000L, active1, 0L);
		case 108:
			return jjMoveStringLiteralDfa3_0(active0, 0x12000000L, active1, 0L);
		case 109:
			if ((active0 & 0x80000L) != 0L) {
				return jjStartNfaWithStates_0(2, 19, 42);
			}
			break;
		case 110:
			return jjMoveStringLiteralDfa3_0(active0, 0x8400001000000L, active1, 0L);
		case 111:
			return jjMoveStringLiteralDfa3_0(active0, 0x1800000000000L, active1, 0x1L);
		case 112:
			return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0L);
		case 114:
			if ((active0 & 0x200000000000000L) != 0L) {
				return jjStartNfaWithStates_0(2, 57, 42);
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L);
		case 115:
			return jjMoveStringLiteralDfa3_0(active0, 0x6000380000000L, active1, 0L);
		case 116:
			if ((active0 & 0x400000000000000L) != 0L) {
				return jjStartNfaWithStates_0(2, 58, 42);
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x812000c000000000L, active1, 0L);
		case 117:
			return jjMoveStringLiteralDfa3_0(active0, 0x10001000000000L, active1, 0L);
		case 122:
			return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L);
		default:
			break;
		}
		return jjStartNfa_0(1, active0, active1);
	}

	private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) {
			return jjStartNfa_0(1, old0, old1);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0, active1);
			return 3;
		}
		switch (curChar) {
		case 97:
			return jjMoveStringLiteralDfa4_0(active0, 0x900802000000L, active1, 0L);
		case 98:
			return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
		case 100:
			if ((active0 & 0x40000000000000L) != 0L) {
				return jjStartNfaWithStates_0(3, 54, 42);
			}
			break;
		case 101:
			if ((active0 & 0x2000000000000L) != 0L) {
				return jjStartNfaWithStates_0(3, 49, 42);
			} else if ((active0 & 0x4000000000000L) != 0L) {
				return jjStartNfaWithStates_0(3, 50, 42);
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x2000008400000000L, active1, 0L);
		case 103:
			if ((active0 & 0x8000000000000L) != 0L) {
				return jjStartNfaWithStates_0(3, 51, 42);
			}
			break;
		case 105:
			return jjMoveStringLiteralDfa4_0(active0, 0x394000000L, active1, 0L);
		case 108:
			return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L);
		case 109:
			if ((active0 & 0x10000000000000L) != 0L) {
				return jjStartNfaWithStates_0(3, 52, 42);
			}
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L);
		case 110:
			return jjMoveStringLiteralDfa4_0(active0, 0x40060000000L, active1, 0L);
		case 111:
			if ((active0 & 0x20000000000000L) != 0L) {
				return jjStartNfaWithStates_0(3, 53, 42);
			} else if ((active0 & 0x100000000000000L) != 0L) {
				return jjStartNfaWithStates_0(3, 56, 42);
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x8000200008000000L, active1, 0L);
		case 114:
			if ((active0 & 0x80000000000000L) != 0L) {
				return jjStartNfaWithStates_0(3, 55, 42);
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);
		case 115:
			return jjMoveStringLiteralDfa4_0(active0, 0x400000060000L, active1, 0L);
		case 116:
			return jjMoveStringLiteralDfa4_0(active0, 0x22001010000L, active1, 0L);
		case 117:
			return jjMoveStringLiteralDfa4_0(active0, 0x14000000000L, active1, 0L);
		case 120:
			return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
		default:
			break;
		}
		return jjStartNfa_0(2, active0, active1);
	}

	private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) {
			return jjStartNfa_0(2, old0, old1);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0, active1);
			return 4;
		}
		switch (curChar) {
		case 99:
			return jjMoveStringLiteralDfa5_0(active0, 0x12000000000L, active1, 0L);
		case 100:
			return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0L);
		case 101:
			if ((active0 & 0x80000000000L) != 0L) {
				return jjStartNfaWithStates_0(4, 43, 42);
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L);
		case 103:
			return jjMoveStringLiteralDfa5_0(active0, 0x380000000L, active1, 0L);
		case 105:
			return jjMoveStringLiteralDfa5_0(active0, 0x20001000000L, active1, 0L);
		case 107:
			if ((active0 & 0x100000000000L) != 0L) {
				return jjStartNfaWithStates_0(4, 44, 42);
			}
			break;
		case 108:
			return jjMoveStringLiteralDfa5_0(active0, 0x1060000000L, active1, 0L);
		case 109:
			if ((active0 & 0x20000L) != 0L) {
				jjmatchedKind = 17;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x8000000000040000L, active1, 0L);
		case 110:
			if ((active0 & 0x200000000000L) != 0L) {
				return jjStartNfaWithStates_0(4, 45, 42);
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x18000000L, active1, 0L);
		case 111:
			return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L);
		case 112:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L);
		case 114:
			return jjMoveStringLiteralDfa5_0(active0, 0xc000000000L, active1, 0L);
		case 115:
			return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0L);
		case 116:
			if ((active0 & 0x400000000000L) != 0L) {
				return jjStartNfaWithStates_0(4, 46, 42);
			} else if ((active0 & 0x800000000000L) != 0L) {
				return jjStartNfaWithStates_0(4, 47, 42);
			} else if ((active0 & 0x1000000000000L) != 0L) {
				return jjStartNfaWithStates_0(4, 48, 42);
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x4000000002010000L, active1, 0L);
		case 117:
			return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L);
		default:
			break;
		}
		return jjStartNfa_0(3, active0, active1);
	}

	private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) {
			return jjStartNfa_0(3, old0, old1);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0, active1);
			return 5;
		}
		switch (curChar) {
		case 95:
			return jjMoveStringLiteralDfa6_0(active0, 0x40000L, active1, 0L);
		case 99:
			if ((active0 & 0x20000000000L) != 0L) {
				return jjStartNfaWithStates_0(5, 41, 42);
			}
			break;
		case 100:
			if ((active0 & 0x40000000000L) != 0L) {
				return jjStartNfaWithStates_0(5, 42, 42);
			}
			break;
		case 101:
			if ((active0 & 0x10000000L) != 0L) {
				return jjStartNfaWithStates_0(5, 28, 42);
			} else if ((active0 & 0x1000000000L) != 0L) {
				return jjStartNfaWithStates_0(5, 36, 42);
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x4000000400000000L, active1, 0L);
		case 102:
			if ((active0 & 0x2000000000000000L) != 0L) {
				return jjStartNfaWithStates_0(5, 61, 42);
			}
			break;
		case 104:
			if ((active0 & 0x2000000000L) != 0L) {
				return jjStartNfaWithStates_0(5, 37, 42);
			}
			break;
		case 105:
			return jjMoveStringLiteralDfa6_0(active0, 0x8000000062000000L, active1, 0L);
		case 108:
			return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0x1L);
		case 110:
			if ((active0 & 0x4000000000L) != 0L) {
				return jjStartNfaWithStates_0(5, 38, 42);
			} else if ((active0 & 0x8000000000L) != 0L) {
				return jjStartNfaWithStates_0(5, 39, 42);
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x381000000L, active1, 0L);
		case 114:
			return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0L);
		case 115:
			return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L);
		case 116:
			if ((active0 & 0x10000000000L) != 0L) {
				return jjStartNfaWithStates_0(5, 40, 42);
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0L);
		default:
			break;
		}
		return jjStartNfa_0(4, active0, active1);
	}

	private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) {
			return jjStartNfa_0(4, old0, old1);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0, active1);
			return 6;
		}
		switch (curChar) {
		case 95:
			if ((active0 & 0x40000L) != 0L) {
				return jjStartNfaWithStates_0(6, 18, 42);
			}
			break;
		case 99:
			if ((active0 & 0x8000000000000000L) != 0L) {
				return jjStartNfaWithStates_0(6, 63, 42);
			}
			break;
		case 101:
			return jjMoveStringLiteralDfa7_0(active0, 0x384000000L, active1, 0x1L);
		case 102:
			if ((active0 & 0x400000000L) != 0L) {
				return jjStartNfaWithStates_0(6, 34, 42);
			}
			break;
		case 105:
			return jjMoveStringLiteralDfa7_0(active0, 0x10000L, active1, 0L);
		case 108:
			return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L);
		case 110:
			return jjMoveStringLiteralDfa7_0(active0, 0x4000000060000000L, active1, 0L);
		case 116:
			if ((active0 & 0x8000000L) != 0L) {
				return jjStartNfaWithStates_0(6, 27, 42);
			} else if ((active0 & 0x800000000L) != 0L) {
				return jjStartNfaWithStates_0(6, 35, 42);
			}
			break;
		case 117:
			return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0L);
		default:
			break;
		}
		return jjStartNfa_0(5, active0, active1);
	}

	private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) {
			return jjStartNfa_0(5, old0, old1);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(6, active0, active1);
			return 7;
		}
		switch (curChar) {
		case 98:
			return jjMoveStringLiteralDfa8_0(active0, 0x10000L, active1, 0L);
		case 100:
			if ((active0 & 0x80000000L) != 0L) {
				jjmatchedKind = 31;
				jjmatchedPos = 7;
			} else if ((active0 & 0x200000000L) != 0L) {
				return jjStartNfaWithStates_0(7, 33, 42);
			}
			return jjMoveStringLiteralDfa8_0(active0, 0x100000000L, active1, 0L);
		case 101:
			if ((active0 & 0x1000000L) != 0L) {
				return jjStartNfaWithStates_0(7, 24, 42);
			} else if ((active0 & 0x2000000L) != 0L) {
				return jjStartNfaWithStates_0(7, 25, 42);
			} else if ((active0 & 0x20000000L) != 0L) {
				jjmatchedKind = 29;
				jjmatchedPos = 7;
			}
			return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1, 0L);
		case 114:
			if ((active0 & 0x4000000L) != 0L) {
				return jjStartNfaWithStates_0(7, 26, 42);
			}
			break;
		case 115:
			return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0L);
		case 120:
			if ((active1 & 0x1L) != 0L) {
				return jjStartNfaWithStates_0(7, 64, 42);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_0(6, active0, active1);
	}

	private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) {
			return jjStartNfa_0(6, old0, old1);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(7, active0, 0L);
			return 8;
		}
		switch (curChar) {
		case 95:
			return jjMoveStringLiteralDfa9_0(active0, 0x140000000L);
		case 105:
			return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L);
		case 117:
			return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
		default:
			break;
		}
		return jjStartNfa_0(7, active0, 0L);
	}

	private int jjMoveStringLiteralDfa9_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L) {
			return jjStartNfa_0(7, old0, 0L);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(8, active0, 0L);
			return 9;
		}
		switch (curChar) {
		case 95:
			if ((active0 & 0x40000000L) != 0L) {
				return jjStartNfaWithStates_0(9, 30, 42);
			} else if ((active0 & 0x100000000L) != 0L) {
				return jjStartNfaWithStates_0(9, 32, 42);
			}
			break;
		case 111:
			return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L);
		case 116:
			return jjMoveStringLiteralDfa10_0(active0, 0x10000L);
		default:
			break;
		}
		return jjStartNfa_0(8, active0, 0L);
	}

	private int jjMoveStringLiteralDfa10_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L) {
			return jjStartNfa_0(8, old0, 0L);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(9, active0, 0L);
			return 10;
		}
		switch (curChar) {
		case 101:
			return jjMoveStringLiteralDfa11_0(active0, 0x10000L);
		case 110:
			return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000000L);
		default:
			break;
		}
		return jjStartNfa_0(9, active0, 0L);
	}

	private int jjMoveStringLiteralDfa11_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L) {
			return jjStartNfa_0(9, old0, 0L);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(10, active0, 0L);
			return 11;
		}
		switch (curChar) {
		case 95:
			return jjMoveStringLiteralDfa12_0(active0, 0x4000000000010000L);
		default:
			break;
		}
		return jjStartNfa_0(10, active0, 0L);
	}

	private int jjMoveStringLiteralDfa12_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L) {
			return jjStartNfa_0(10, old0, 0L);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(11, active0, 0L);
			return 12;
		}
		switch (curChar) {
		case 95:
			if ((active0 & 0x10000L) != 0L) {
				return jjStartNfaWithStates_0(12, 16, 42);
			} else if ((active0 & 0x4000000000000000L) != 0L) {
				return jjStartNfaWithStates_0(12, 62, 42);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_0(11, active0, 0L);
	}

	private int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };

	private int jjMoveNfa_0(int startState, int curPos) {
		int startsAt = 0;
		jjnewStateCnt = 79;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff) {
				ReInitRounds();
			}
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
					case 38:
					case 42:
						if ((0x3ff001000000000L & l) == 0L) {
							break;
						}
						if (kind > 180) {
							kind = 180;
						}
						jjCheckNAdd(42);
						break;
					case 37:
						if ((0x3ff001000000000L & l) == 0L) {
							break;
						}
						if (kind > 180) {
							kind = 180;
						}
						jjCheckNAdd(42);
						break;
					case 0:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(0, 6);
						} else if (curChar == 47) {
							jjAddStates(7, 8);
						} else if (curChar == 36) {
							if (kind > 180) {
								kind = 180;
							}
							jjCheckNAdd(42);
						} else if (curChar == 34) {
							jjCheckNAddStates(9, 11);
						} else if (curChar == 39) {
							jjAddStates(12, 13);
						} else if (curChar == 46) {
							jjCheckNAdd(5);
						}
						if ((0x3fe000000000000L & l) != 0L) {
							if (kind > 8) {
								kind = 8;
							}
							jjCheckNAddStates(14, 16);
						} else if (curChar == 48) {
							if (kind > 8) {
								kind = 8;
							}
							jjCheckNAddStates(17, 20);
						}
						break;
					case 68:
						if (curChar == 42) {
							jjCheckNAddTwoStates(74, 75);
						} else if (curChar == 47) {
							jjCheckNAddStates(21, 23);
						}
						break;
					case 29:
						if ((0x3ff001000000000L & l) == 0L) {
							break;
						}
						if (kind > 180) {
							kind = 180;
						}
						jjCheckNAdd(42);
						break;
					case 79:
						if ((0x3ff001000000000L & l) == 0L) {
							break;
						}
						if (kind > 180) {
							kind = 180;
						}
						jjCheckNAdd(42);
						break;
					case 1:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAddStates(14, 16);
						break;
					case 4:
						if (curChar == 46) {
							jjCheckNAdd(5);
						}
						break;
					case 5:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(24, 26);
						break;
					case 7:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(8);
						}
						break;
					case 8:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(27, 29);
						break;
					case 11:
						if (curChar == 39) {
							jjAddStates(12, 13);
						}
						break;
					case 12:
						if ((0xffffff7fffffdbffL & l) != 0L) {
							jjCheckNAdd(13);
						}
						break;
					case 13:
						if (curChar == 39 && kind > 14) {
							kind = 14;
						}
						break;
					case 15:
						if ((0x8400000000L & l) != 0L) {
							jjCheckNAdd(13);
						}
						break;
					case 16:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAddTwoStates(17, 13);
						}
						break;
					case 17:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAdd(13);
						}
						break;
					case 18:
						if ((0xf000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 19;
						}
						break;
					case 19:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAdd(17);
						}
						break;
					case 20:
						if (curChar == 34) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 21:
						if ((0xfffffffbffffdbffL & l) != 0L) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 23:
						if ((0x8400000000L & l) != 0L) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 24:
						if (curChar == 34 && kind > 15) {
							kind = 15;
						}
						break;
					case 25:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAddStates(30, 33);
						}
						break;
					case 26:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 27:
						if ((0xf000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 28;
						}
						break;
					case 28:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAdd(26);
						}
						break;
					case 41:
						if (curChar != 36) {
							break;
						}
						if (kind > 180) {
							kind = 180;
						}
						jjCheckNAdd(42);
						break;
					case 43:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(0, 6);
						}
						break;
					case 44:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddTwoStates(44, 45);
						}
						break;
					case 45:
						if (curChar != 46) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(34, 36);
						break;
					case 46:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(34, 36);
						break;
					case 48:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(49);
						}
						break;
					case 49:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(37, 39);
						break;
					case 51:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddTwoStates(51, 52);
						}
						break;
					case 53:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(54);
						}
						break;
					case 54:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(40, 42);
						break;
					case 56:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(43, 45);
						}
						break;
					case 58:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(59);
						}
						break;
					case 59:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(46, 48);
						}
						break;
					case 61:
						if (curChar != 48) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAddStates(17, 20);
						break;
					case 63:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAddStates(49, 51);
						break;
					case 65:
						if ((0xff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAddStates(52, 54);
						break;
					case 67:
						if (curChar == 47) {
							jjAddStates(7, 8);
						}
						break;
					case 69:
						if ((0xffffffffffffdbffL & l) != 0L) {
							jjCheckNAddStates(21, 23);
						}
						break;
					case 70:
						if ((0x2400L & l) != 0L && kind > 6) {
							kind = 6;
						}
						break;
					case 71:
						if (curChar == 10 && kind > 6) {
							kind = 6;
						}
						break;
					case 72:
						if (curChar == 13) {
							jjstateSet[jjnewStateCnt++] = 71;
						}
						break;
					case 73:
						if (curChar == 42) {
							jjCheckNAddTwoStates(74, 75);
						}
						break;
					case 74:
						if ((0xfffffbffffffffffL & l) != 0L) {
							jjCheckNAddTwoStates(74, 75);
						}
						break;
					case 75:
						if (curChar == 42) {
							jjCheckNAddStates(55, 57);
						}
						break;
					case 76:
						if ((0xffff7bffffffffffL & l) != 0L) {
							jjCheckNAddTwoStates(77, 75);
						}
						break;
					case 77:
						if ((0xfffffbffffffffffL & l) != 0L) {
							jjCheckNAddTwoStates(77, 75);
						}
						break;
					case 78:
						if (curChar == 47 && kind > 7) {
							kind = 7;
						}
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 38:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 180) {
								kind = 180;
							}
							jjCheckNAdd(42);
						}
						if (curChar == 101) {
							jjstateSet[jjnewStateCnt++] = 37;
						}
						break;
					case 37:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 180) {
								kind = 180;
							}
							jjCheckNAdd(42);
						}
						if (curChar == 115) {
							jjstateSet[jjnewStateCnt++] = 36;
						}
						break;
					case 0:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 180) {
								kind = 180;
							}
							jjCheckNAdd(42);
						}
						if (curChar == 114) {
							jjstateSet[jjnewStateCnt++] = 38;
						} else if (curChar == 95) {
							jjstateSet[jjnewStateCnt++] = 29;
						}
						break;
					case 29:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 180) {
								kind = 180;
							}
							jjCheckNAdd(42);
						}
						if (curChar == 95) {
							jjstateSet[jjnewStateCnt++] = 39;
						}
						break;
					case 79:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 180) {
								kind = 180;
							}
							jjCheckNAdd(42);
						}
						if (curChar == 114) {
							jjstateSet[jjnewStateCnt++] = 38;
						}
						break;
					case 2:
					case 64:
					case 66:
						if ((0x20000000200000L & l) == 0L) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAdd(3);
						break;
					case 3:
						if ((0x100000001000L & l) != 0L && kind > 8) {
							kind = 8;
						}
						break;
					case 6:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(58, 59);
						}
						break;
					case 9:
					case 50:
					case 55:
						if ((0x100000001000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAdd(10);
						break;
					case 10:
						if ((0x5000000050L & l) != 0L && kind > 12) {
							kind = 12;
						}
						break;
					case 12:
						if ((0xffffffffefffffffL & l) != 0L) {
							jjCheckNAdd(13);
						}
						break;
					case 14:
						if (curChar == 92) {
							jjAddStates(60, 62);
						}
						break;
					case 15:
						if ((0x14404410000000L & l) != 0L) {
							jjCheckNAdd(13);
						}
						break;
					case 21:
						if ((0xffffffffefffffffL & l) != 0L) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 22:
						if (curChar == 92) {
							jjAddStates(63, 65);
						}
						break;
					case 23:
						if ((0x14404410000000L & l) != 0L) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 30:
						if (curChar != 116) {
							break;
						}
						if (kind > 23) {
							kind = 23;
						}
						jjstateSet[jjnewStateCnt++] = 32;
						break;
					case 31:
						if (curChar == 95 && kind > 23) {
							kind = 23;
						}
						break;
					case 32:
						if (curChar == 95) {
							jjstateSet[jjnewStateCnt++] = 31;
						}
						break;
					case 33:
						if (curChar == 99) {
							jjstateSet[jjnewStateCnt++] = 30;
						}
						break;
					case 34:
						if (curChar == 105) {
							jjstateSet[jjnewStateCnt++] = 33;
						}
						break;
					case 35:
						if (curChar == 114) {
							jjstateSet[jjnewStateCnt++] = 34;
						}
						break;
					case 36:
						if (curChar == 116) {
							jjstateSet[jjnewStateCnt++] = 35;
						}
						break;
					case 39:
						if (curChar == 114) {
							jjstateSet[jjnewStateCnt++] = 38;
						}
						break;
					case 40:
						if (curChar == 95) {
							jjstateSet[jjnewStateCnt++] = 29;
						}
						break;
					case 41:
						if ((0x7fffffe87fffffeL & l) == 0L) {
							break;
						}
						if (kind > 180) {
							kind = 180;
						}
						jjCheckNAdd(42);
						break;
					case 42:
						if ((0x7fffffe87fffffeL & l) == 0L) {
							break;
						}
						if (kind > 180) {
							kind = 180;
						}
						jjCheckNAdd(42);
						break;
					case 47:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(66, 67);
						}
						break;
					case 52:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(68, 69);
						}
						break;
					case 57:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(70, 71);
						}
						break;
					case 60:
						if ((0x100000001000L & l) != 0L) {
							jjCheckNAdd(10);
						}
						break;
					case 62:
						if ((0x100000001000000L & l) != 0L) {
							jjCheckNAdd(63);
						}
						break;
					case 63:
						if ((0x7e0000007eL & l) == 0L) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAddStates(49, 51);
						break;
					case 69:
						jjAddStates(21, 23);
						break;
					case 74:
						jjCheckNAddTwoStates(74, 75);
						break;
					case 76:
					case 77:
						jjCheckNAddTwoStates(77, 75);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 12:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjstateSet[jjnewStateCnt++] = 13;
						}
						break;
					case 21:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjAddStates(9, 11);
						}
						break;
					case 69:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjAddStates(21, 23);
						}
						break;
					case 74:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjCheckNAddTwoStates(74, 75);
						}
						break;
					case 76:
					case 77:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjCheckNAddTwoStates(77, 75);
						}
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 79 - (jjnewStateCnt = startsAt))) {
				return curPos;
			}
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2) {
		switch (pos) {
		case 0:
			if ((active1 & 0x10000100L) != 0L) {
				return 54;
			}
			if ((active1 & 0x8000000002L) != 0L) {
				return 5;
			}
			return -1;
		default:
			return -1;
		}
	}

	private final int jjStartNfa_2(int pos, long active0, long active1, long active2) {
		return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2), pos + 1);
	}

	private int jjMoveStringLiteralDfa0_2() {
		switch (curChar) {
		case 10:
			return jjStopAtPos(0, 132);
		case 13:
			return jjStopAtPos(0, 133);
		case 33:
			jjmatchedKind = 98;
			return jjMoveStringLiteralDfa1_2(0x20000L, 0x0L);
		case 37:
			jjmatchedKind = 93;
			return jjMoveStringLiteralDfa1_2(0x200L, 0x0L);
		case 38:
			jjmatchedKind = 95;
			return jjMoveStringLiteralDfa1_2(0x1020L, 0x0L);
		case 40:
			return jjStopAtPos(0, 104);
		case 41:
			return jjStopAtPos(0, 105);
		case 42:
			jjmatchedKind = 91;
			return jjMoveStringLiteralDfa1_2(0x80L, 0x0L);
		case 43:
			jjmatchedKind = 89;
			return jjMoveStringLiteralDfa1_2(0x200400L, 0x0L);
		case 44:
			return jjStopAtPos(0, 110);
		case 45:
			jjmatchedKind = 90;
			return jjMoveStringLiteralDfa1_2(0x500800L, 0x0L);
		case 46:
			jjmatchedKind = 103;
			return jjMoveStringLiteralDfa1_2(0x2L, 0x0L);
		case 47:
			jjmatchedKind = 92;
			return jjMoveStringLiteralDfa1_2(0x100L, 0x0L);
		case 58:
			return jjStopAtPos(0, 100);
		case 59:
			return jjStopAtPos(0, 101);
		case 60:
			jjmatchedKind = 88;
			return jjMoveStringLiteralDfa1_2(0x88004L, 0x0L);
		case 61:
			jjmatchedKind = 94;
			return jjMoveStringLiteralDfa1_2(0x10L, 0x0L);
		case 62:
			jjmatchedKind = 87;
			return jjMoveStringLiteralDfa1_2(0x50008L, 0x0L);
		case 63:
			return jjStopAtPos(0, 102);
		case 91:
			return jjStopAtPos(0, 106);
		case 93:
			return jjStopAtPos(0, 107);
		case 94:
			jjmatchedKind = 97;
			return jjMoveStringLiteralDfa1_2(0x2000L, 0x0L);
		case 111:
			return jjMoveStringLiteralDfa1_2(0x0L, 0x1000L);
		case 123:
			return jjStopAtPos(0, 108);
		case 124:
			jjmatchedKind = 96;
			return jjMoveStringLiteralDfa1_2(0x4040L, 0x0L);
		case 125:
			return jjStopAtPos(0, 109);
		case 126:
			return jjStopAtPos(0, 99);
		default:
			return jjMoveNfa_2(0, 0);
		}
	}

	private int jjMoveStringLiteralDfa1_2(long active1, long active2) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_2(0, 0L, active1, active2);
			return 1;
		}
		switch (curChar) {
		case 38:
			if ((active1 & 0x20L) != 0L) {
				return jjStopAtPos(1, 69);
			}
			break;
		case 43:
			if ((active1 & 0x200000L) != 0L) {
				return jjStopAtPos(1, 85);
			}
			break;
		case 45:
			if ((active1 & 0x400000L) != 0L) {
				return jjStopAtPos(1, 86);
			}
			break;
		case 46:
			return jjMoveStringLiteralDfa2_2(active1, 0x2L, active2, 0L);
		case 60:
			if ((active1 & 0x8000L) != 0L) {
				jjmatchedKind = 79;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_2(active1, 0x4L, active2, 0L);
		case 61:
			if ((active1 & 0x10L) != 0L) {
				return jjStopAtPos(1, 68);
			} else if ((active1 & 0x80L) != 0L) {
				return jjStopAtPos(1, 71);
			} else if ((active1 & 0x100L) != 0L) {
				return jjStopAtPos(1, 72);
			} else if ((active1 & 0x200L) != 0L) {
				return jjStopAtPos(1, 73);
			} else if ((active1 & 0x400L) != 0L) {
				return jjStopAtPos(1, 74);
			} else if ((active1 & 0x800L) != 0L) {
				return jjStopAtPos(1, 75);
			} else if ((active1 & 0x1000L) != 0L) {
				return jjStopAtPos(1, 76);
			} else if ((active1 & 0x2000L) != 0L) {
				return jjStopAtPos(1, 77);
			} else if ((active1 & 0x4000L) != 0L) {
				return jjStopAtPos(1, 78);
			} else if ((active1 & 0x20000L) != 0L) {
				return jjStopAtPos(1, 81);
			} else if ((active1 & 0x40000L) != 0L) {
				return jjStopAtPos(1, 82);
			} else if ((active1 & 0x80000L) != 0L) {
				return jjStopAtPos(1, 83);
			}
			break;
		case 62:
			if ((active1 & 0x10000L) != 0L) {
				jjmatchedKind = 80;
				jjmatchedPos = 1;
			} else if ((active1 & 0x100000L) != 0L) {
				return jjStopAtPos(1, 84);
			}
			return jjMoveStringLiteralDfa2_2(active1, 0x8L, active2, 0L);
		case 109:
			return jjMoveStringLiteralDfa2_2(active1, 0L, active2, 0x1000L);
		case 124:
			if ((active1 & 0x40L) != 0L) {
				return jjStopAtPos(1, 70);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_2(0, 0L, active1, active2);
	}

	private int jjMoveStringLiteralDfa2_2(long old1, long active1, long old2, long active2) {
		if (((active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_2(0, 0L, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_2(1, 0L, active1, active2);
			return 2;
		}
		switch (curChar) {
		case 46:
			if ((active1 & 0x2L) != 0L) {
				return jjStopAtPos(2, 65);
			}
			break;
		case 61:
			if ((active1 & 0x4L) != 0L) {
				return jjStopAtPos(2, 66);
			} else if ((active1 & 0x8L) != 0L) {
				return jjStopAtPos(2, 67);
			}
			break;
		case 112:
			if ((active2 & 0x1000L) != 0L) {
				return jjStopAtPos(2, 140);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_2(1, 0L, active1, active2);
	}

	private int jjMoveNfa_2(int startState, int curPos) {
		int startsAt = 0;
		jjnewStateCnt = 65;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff) {
				ReInitRounds();
			}
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
					case 54:
						if (curChar == 42) {
							jjCheckNAddTwoStates(60, 61);
						} else if (curChar == 47) {
							jjCheckNAddStates(72, 74);
						}
						break;
					case 0:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(75, 81);
						} else if (curChar == 47) {
							jjAddStates(82, 83);
						} else if (curChar == 34) {
							jjCheckNAddStates(9, 11);
						} else if (curChar == 39) {
							jjAddStates(12, 13);
						} else if (curChar == 46) {
							jjCheckNAdd(5);
						}
						if ((0x3fe000000000000L & l) != 0L) {
							if (kind > 8) {
								kind = 8;
							}
							jjCheckNAddStates(14, 16);
						} else if (curChar == 48) {
							if (kind > 8) {
								kind = 8;
							}
							jjCheckNAddStates(84, 87);
						}
						break;
					case 1:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAddStates(14, 16);
						break;
					case 4:
						if (curChar == 46) {
							jjCheckNAdd(5);
						}
						break;
					case 5:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(24, 26);
						break;
					case 7:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(8);
						}
						break;
					case 8:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(27, 29);
						break;
					case 11:
						if (curChar == 39) {
							jjAddStates(12, 13);
						}
						break;
					case 12:
						if ((0xffffff7fffffdbffL & l) != 0L) {
							jjCheckNAdd(13);
						}
						break;
					case 13:
						if (curChar == 39 && kind > 14) {
							kind = 14;
						}
						break;
					case 15:
						if ((0x8400000000L & l) != 0L) {
							jjCheckNAdd(13);
						}
						break;
					case 16:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAddTwoStates(17, 13);
						}
						break;
					case 17:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAdd(13);
						}
						break;
					case 18:
						if ((0xf000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 19;
						}
						break;
					case 19:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAdd(17);
						}
						break;
					case 20:
						if (curChar == 34) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 21:
						if ((0xfffffffbffffdbffL & l) != 0L) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 23:
						if ((0x8400000000L & l) != 0L) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 24:
						if (curChar == 34 && kind > 15) {
							kind = 15;
						}
						break;
					case 25:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAddStates(30, 33);
						}
						break;
					case 26:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 27:
						if ((0xf000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 28;
						}
						break;
					case 28:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAdd(26);
						}
						break;
					case 29:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(75, 81);
						}
						break;
					case 30:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddTwoStates(30, 31);
						}
						break;
					case 31:
						if (curChar != 46) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(88, 90);
						break;
					case 32:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(88, 90);
						break;
					case 34:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(35);
						}
						break;
					case 35:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(91, 93);
						break;
					case 37:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddTwoStates(37, 38);
						}
						break;
					case 39:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(40);
						}
						break;
					case 40:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(94, 96);
						break;
					case 42:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(97, 99);
						}
						break;
					case 44:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(45);
						}
						break;
					case 45:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(100, 102);
						}
						break;
					case 47:
						if (curChar != 48) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAddStates(84, 87);
						break;
					case 49:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAddStates(103, 105);
						break;
					case 51:
						if ((0xff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAddStates(106, 108);
						break;
					case 53:
						if (curChar == 47) {
							jjAddStates(82, 83);
						}
						break;
					case 55:
						if ((0xffffffffffffdbffL & l) != 0L) {
							jjCheckNAddStates(72, 74);
						}
						break;
					case 56:
						if ((0x2400L & l) != 0L && kind > 130) {
							kind = 130;
						}
						break;
					case 57:
						if (curChar == 10 && kind > 130) {
							kind = 130;
						}
						break;
					case 58:
						if (curChar == 13) {
							jjstateSet[jjnewStateCnt++] = 57;
						}
						break;
					case 59:
						if (curChar == 42) {
							jjCheckNAddTwoStates(60, 61);
						}
						break;
					case 60:
						if ((0xfffffbffffffffffL & l) != 0L) {
							jjCheckNAddTwoStates(60, 61);
						}
						break;
					case 61:
						if (curChar == 42) {
							jjCheckNAddStates(109, 111);
						}
						break;
					case 62:
						if ((0xffff7bffffffffffL & l) != 0L) {
							jjCheckNAddTwoStates(63, 61);
						}
						break;
					case 63:
						if ((0xfffffbffffffffffL & l) != 0L) {
							jjCheckNAddTwoStates(63, 61);
						}
						break;
					case 64:
						if (curChar == 47 && kind > 131) {
							kind = 131;
						}
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 2:
					case 50:
					case 52:
						if ((0x20000000200000L & l) == 0L) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAdd(3);
						break;
					case 3:
						if ((0x100000001000L & l) != 0L && kind > 8) {
							kind = 8;
						}
						break;
					case 6:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(58, 59);
						}
						break;
					case 9:
					case 36:
					case 41:
						if ((0x100000001000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAdd(10);
						break;
					case 10:
						if ((0x5000000050L & l) != 0L && kind > 12) {
							kind = 12;
						}
						break;
					case 12:
						if ((0xffffffffefffffffL & l) != 0L) {
							jjCheckNAdd(13);
						}
						break;
					case 14:
						if (curChar == 92) {
							jjAddStates(60, 62);
						}
						break;
					case 15:
						if ((0x14404410000000L & l) != 0L) {
							jjCheckNAdd(13);
						}
						break;
					case 21:
						if ((0xffffffffefffffffL & l) != 0L) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 22:
						if (curChar == 92) {
							jjAddStates(63, 65);
						}
						break;
					case 23:
						if ((0x14404410000000L & l) != 0L) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 33:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(112, 113);
						}
						break;
					case 38:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(114, 115);
						}
						break;
					case 43:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(116, 117);
						}
						break;
					case 46:
						if ((0x100000001000L & l) != 0L) {
							jjCheckNAdd(10);
						}
						break;
					case 48:
						if ((0x100000001000000L & l) != 0L) {
							jjCheckNAdd(49);
						}
						break;
					case 49:
						if ((0x7e0000007eL & l) == 0L) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAddStates(103, 105);
						break;
					case 55:
						jjAddStates(72, 74);
						break;
					case 60:
						jjCheckNAddTwoStates(60, 61);
						break;
					case 62:
					case 63:
						jjCheckNAddTwoStates(63, 61);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 12:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjstateSet[jjnewStateCnt++] = 13;
						}
						break;
					case 21:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjAddStates(9, 11);
						}
						break;
					case 55:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjAddStates(72, 74);
						}
						break;
					case 60:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjCheckNAddTwoStates(60, 61);
						}
						break;
					case 62:
					case 63:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjCheckNAddTwoStates(63, 61);
						}
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 65 - (jjnewStateCnt = startsAt))) {
				return curPos;
			}
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	private int jjMoveStringLiteralDfa0_4() {
		switch (curChar) {
		case 40:
			return jjStopAtPos(0, 20);
		case 41:
			return jjStopAtPos(0, 21);
		default:
			return 1;
		}
	}

	private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2) {
		switch (pos) {
		case 0:
			if ((active1 & 0x10000100L) != 0L) {
				return 57;
			}
			if ((active1 & 0x3ffe000000000000L) != 0L) {
				jjmatchedKind = 180;
				return 31;
			}
			if ((active1 & 0x8000000002L) != 0L) {
				return 5;
			}
			return -1;
		case 1:
			if ((active1 & 0x1120000000000000L) != 0L) {
				return 31;
			}
			if ((active1 & 0x2ede000000000000L) != 0L) {
				if (jjmatchedPos != 1) {
					jjmatchedKind = 180;
					jjmatchedPos = 1;
				}
				return 31;
			}
			return -1;
		case 2:
			if ((active1 & 0x2ffe000000000000L) != 0L) {
				jjmatchedKind = 180;
				jjmatchedPos = 2;
				return 31;
			}
			return -1;
		case 3:
			if ((active1 & 0x2c00000000000000L) != 0L) {
				return 31;
			}
			if ((active1 & 0x3fe000000000000L) != 0L) {
				jjmatchedKind = 180;
				jjmatchedPos = 3;
				return 31;
			}
			return -1;
		case 4:
			if ((active1 & 0x3c0000000000000L) != 0L) {
				return 31;
			}
			if ((active1 & 0x3e000000000000L) != 0L) {
				jjmatchedKind = 180;
				jjmatchedPos = 4;
				return 31;
			}
			return -1;
		case 5:
			if ((active1 & 0x4000000000000L) != 0L) {
				jjmatchedKind = 180;
				jjmatchedPos = 5;
				return 31;
			}
			if ((active1 & 0x3a000000000000L) != 0L) {
				return 31;
			}
			return -1;
		default:
			return -1;
		}
	}

	private final int jjStartNfa_1(int pos, long active0, long active1, long active2) {
		return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2), pos + 1);
	}

	private int jjMoveStringLiteralDfa0_1() {
		switch (curChar) {
		case 33:
			jjmatchedKind = 98;
			return jjMoveStringLiteralDfa1_1(0x20000L);
		case 37:
			jjmatchedKind = 93;
			return jjMoveStringLiteralDfa1_1(0x200L);
		case 38:
			jjmatchedKind = 95;
			return jjMoveStringLiteralDfa1_1(0x1020L);
		case 40:
			return jjStopAtPos(0, 104);
		case 41:
			return jjStopAtPos(0, 105);
		case 42:
			jjmatchedKind = 91;
			return jjMoveStringLiteralDfa1_1(0x80L);
		case 43:
			jjmatchedKind = 89;
			return jjMoveStringLiteralDfa1_1(0x200400L);
		case 44:
			return jjStopAtPos(0, 110);
		case 45:
			jjmatchedKind = 90;
			return jjMoveStringLiteralDfa1_1(0x500800L);
		case 46:
			jjmatchedKind = 103;
			return jjMoveStringLiteralDfa1_1(0x2L);
		case 47:
			jjmatchedKind = 92;
			return jjMoveStringLiteralDfa1_1(0x100L);
		case 58:
			return jjStopAtPos(0, 100);
		case 59:
			return jjStopAtPos(0, 101);
		case 60:
			jjmatchedKind = 88;
			return jjMoveStringLiteralDfa1_1(0x88004L);
		case 61:
			jjmatchedKind = 94;
			return jjMoveStringLiteralDfa1_1(0x10L);
		case 62:
			jjmatchedKind = 87;
			return jjMoveStringLiteralDfa1_1(0x50008L);
		case 63:
			return jjStopAtPos(0, 102);
		case 91:
			return jjStopAtPos(0, 106);
		case 93:
			return jjStopAtPos(0, 107);
		case 94:
			jjmatchedKind = 97;
			return jjMoveStringLiteralDfa1_1(0x2000L);
		case 100:
			return jjMoveStringLiteralDfa1_1(0x10000000000000L);
		case 101:
			return jjMoveStringLiteralDfa1_1(0x2a00000000000000L);
		case 105:
			return jjMoveStringLiteralDfa1_1(0x116c000000000000L);
		case 108:
			return jjMoveStringLiteralDfa1_1(0x400000000000000L);
		case 112:
			return jjMoveStringLiteralDfa1_1(0x2000000000000L);
		case 117:
			return jjMoveStringLiteralDfa1_1(0x80000000000000L);
		case 123:
			return jjStopAtPos(0, 108);
		case 124:
			jjmatchedKind = 96;
			return jjMoveStringLiteralDfa1_1(0x4040L);
		case 125:
			return jjStopAtPos(0, 109);
		case 126:
			return jjStopAtPos(0, 99);
		default:
			return jjMoveNfa_1(0, 0);
		}
	}

	private int jjMoveStringLiteralDfa1_1(long active1) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_1(0, 0L, active1, 0L);
			return 1;
		}
		switch (curChar) {
		case 38:
			if ((active1 & 0x20L) != 0L) {
				return jjStopAtPos(1, 69);
			}
			break;
		case 43:
			if ((active1 & 0x200000L) != 0L) {
				return jjStopAtPos(1, 85);
			}
			break;
		case 45:
			if ((active1 & 0x400000L) != 0L) {
				return jjStopAtPos(1, 86);
			}
			break;
		case 46:
			return jjMoveStringLiteralDfa2_1(active1, 0x2L);
		case 60:
			if ((active1 & 0x8000L) != 0L) {
				jjmatchedKind = 79;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_1(active1, 0x4L);
		case 61:
			if ((active1 & 0x10L) != 0L) {
				return jjStopAtPos(1, 68);
			} else if ((active1 & 0x80L) != 0L) {
				return jjStopAtPos(1, 71);
			} else if ((active1 & 0x100L) != 0L) {
				return jjStopAtPos(1, 72);
			} else if ((active1 & 0x200L) != 0L) {
				return jjStopAtPos(1, 73);
			} else if ((active1 & 0x400L) != 0L) {
				return jjStopAtPos(1, 74);
			} else if ((active1 & 0x800L) != 0L) {
				return jjStopAtPos(1, 75);
			} else if ((active1 & 0x1000L) != 0L) {
				return jjStopAtPos(1, 76);
			} else if ((active1 & 0x2000L) != 0L) {
				return jjStopAtPos(1, 77);
			} else if ((active1 & 0x4000L) != 0L) {
				return jjStopAtPos(1, 78);
			} else if ((active1 & 0x20000L) != 0L) {
				return jjStopAtPos(1, 81);
			} else if ((active1 & 0x40000L) != 0L) {
				return jjStopAtPos(1, 82);
			} else if ((active1 & 0x80000L) != 0L) {
				return jjStopAtPos(1, 83);
			}
			break;
		case 62:
			if ((active1 & 0x10000L) != 0L) {
				jjmatchedKind = 80;
				jjmatchedPos = 1;
			} else if ((active1 & 0x100000L) != 0L) {
				return jjStopAtPos(1, 84);
			}
			return jjMoveStringLiteralDfa2_1(active1, 0x8L);
		case 100:
			return jjMoveStringLiteralDfa2_1(active1, 0x40000000000000L);
		case 101:
			return jjMoveStringLiteralDfa2_1(active1, 0x10000000000000L);
		case 102:
			if ((active1 & 0x1000000000000000L) != 0L) {
				jjmatchedKind = 124;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_1(active1, 0x120000000000000L);
		case 105:
			return jjMoveStringLiteralDfa2_1(active1, 0x400000000000000L);
		case 108:
			return jjMoveStringLiteralDfa2_1(active1, 0x2800000000000000L);
		case 109:
			return jjMoveStringLiteralDfa2_1(active1, 0x8000000000000L);
		case 110:
			return jjMoveStringLiteralDfa2_1(active1, 0x284000000000000L);
		case 114:
			return jjMoveStringLiteralDfa2_1(active1, 0x2000000000000L);
		case 124:
			if ((active1 & 0x40L) != 0L) {
				return jjStopAtPos(1, 70);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_1(0, 0L, active1, 0L);
	}

	private int jjMoveStringLiteralDfa2_1(long old1, long active1) {
		if (((active1 &= old1)) == 0L) {
			return jjStartNfa_1(0, 0L, old1, 0L);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_1(1, 0L, active1, 0L);
			return 2;
		}
		switch (curChar) {
		case 46:
			if ((active1 & 0x2L) != 0L) {
				return jjStopAtPos(2, 65);
			}
			break;
		case 61:
			if ((active1 & 0x4L) != 0L) {
				return jjStopAtPos(2, 66);
			} else if ((active1 & 0x8L) != 0L) {
				return jjStopAtPos(2, 67);
			}
			break;
		case 97:
			return jjMoveStringLiteralDfa3_1(active1, 0x2000000000000L);
		case 99:
			return jjMoveStringLiteralDfa3_1(active1, 0x4000000000000L);
		case 100:
			return jjMoveStringLiteralDfa3_1(active1, 0x380000000000000L);
		case 101:
			return jjMoveStringLiteralDfa3_1(active1, 0x40000000000000L);
		case 102:
			return jjMoveStringLiteralDfa3_1(active1, 0x10000000000000L);
		case 105:
			return jjMoveStringLiteralDfa3_1(active1, 0x2000000000000000L);
		case 110:
			return jjMoveStringLiteralDfa3_1(active1, 0x420000000000000L);
		case 112:
			return jjMoveStringLiteralDfa3_1(active1, 0x8000000000000L);
		case 115:
			return jjMoveStringLiteralDfa3_1(active1, 0x800000000000000L);
		default:
			break;
		}
		return jjStartNfa_1(1, 0L, active1, 0L);
	}

	private int jjMoveStringLiteralDfa3_1(long old1, long active1) {
		if (((active1 &= old1)) == 0L) {
			return jjStartNfa_1(1, 0L, old1, 0L);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_1(2, 0L, active1, 0L);
			return 3;
		}
		switch (curChar) {
		case 100:
			return jjMoveStringLiteralDfa4_1(active1, 0x20000000000000L);
		case 101:
			if ((active1 & 0x400000000000000L) != 0L) {
				return jjStartNfaWithStates_1(3, 122, 31);
			} else if ((active1 & 0x800000000000000L) != 0L) {
				return jjStartNfaWithStates_1(3, 123, 31);
			}
			return jjMoveStringLiteralDfa4_1(active1, 0x180000000000000L);
		case 102:
			if ((active1 & 0x2000000000000000L) != 0L) {
				return jjStartNfaWithStates_1(3, 125, 31);
			}
			break;
		case 103:
			return jjMoveStringLiteralDfa4_1(active1, 0x2000000000000L);
		case 105:
			return jjMoveStringLiteralDfa4_1(active1, 0x210000000000000L);
		case 108:
			return jjMoveStringLiteralDfa4_1(active1, 0x4000000000000L);
		case 110:
			return jjMoveStringLiteralDfa4_1(active1, 0x40000000000000L);
		case 111:
			return jjMoveStringLiteralDfa4_1(active1, 0x8000000000000L);
		default:
			break;
		}
		return jjStartNfa_1(2, 0L, active1, 0L);
	}

	private int jjMoveStringLiteralDfa4_1(long old1, long active1) {
		if (((active1 &= old1)) == 0L) {
			return jjStartNfa_1(2, 0L, old1, 0L);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_1(3, 0L, active1, 0L);
			return 4;
		}
		switch (curChar) {
		case 101:
			return jjMoveStringLiteralDfa5_1(active1, 0x20000000000000L);
		case 102:
			if ((active1 & 0x80000000000000L) != 0L) {
				return jjStartNfaWithStates_1(4, 119, 31);
			} else if ((active1 & 0x100000000000000L) != 0L) {
				return jjStartNfaWithStates_1(4, 120, 31);
			} else if ((active1 & 0x200000000000000L) != 0L) {
				return jjStartNfaWithStates_1(4, 121, 31);
			}
			break;
		case 109:
			return jjMoveStringLiteralDfa5_1(active1, 0x2000000000000L);
		case 110:
			return jjMoveStringLiteralDfa5_1(active1, 0x10000000000000L);
		case 114:
			return jjMoveStringLiteralDfa5_1(active1, 0x8000000000000L);
		case 116:
			if ((active1 & 0x40000000000000L) != 0L) {
				return jjStartNfaWithStates_1(4, 118, 31);
			}
			break;
		case 117:
			return jjMoveStringLiteralDfa5_1(active1, 0x4000000000000L);
		default:
			break;
		}
		return jjStartNfa_1(3, 0L, active1, 0L);
	}

	private int jjMoveStringLiteralDfa5_1(long old1, long active1) {
		if (((active1 &= old1)) == 0L) {
			return jjStartNfa_1(3, 0L, old1, 0L);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_1(4, 0L, active1, 0L);
			return 5;
		}
		switch (curChar) {
		case 97:
			if ((active1 & 0x2000000000000L) != 0L) {
				return jjStartNfaWithStates_1(5, 113, 31);
			}
			break;
		case 100:
			return jjMoveStringLiteralDfa6_1(active1, 0x4000000000000L);
		case 101:
			if ((active1 & 0x10000000000000L) != 0L) {
				return jjStartNfaWithStates_1(5, 116, 31);
			}
			break;
		case 102:
			if ((active1 & 0x20000000000000L) != 0L) {
				return jjStartNfaWithStates_1(5, 117, 31);
			}
			break;
		case 116:
			if ((active1 & 0x8000000000000L) != 0L) {
				return jjStartNfaWithStates_1(5, 115, 31);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_1(4, 0L, active1, 0L);
	}

	private int jjMoveStringLiteralDfa6_1(long old1, long active1) {
		if (((active1 &= old1)) == 0L) {
			return jjStartNfa_1(4, 0L, old1, 0L);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_1(5, 0L, active1, 0L);
			return 6;
		}
		switch (curChar) {
		case 101:
			if ((active1 & 0x4000000000000L) != 0L) {
				return jjStartNfaWithStates_1(6, 114, 31);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_1(5, 0L, active1, 0L);
	}

	private int jjStartNfaWithStates_1(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_1(state, pos + 1);
	}

	private int jjMoveNfa_1(int startState, int curPos) {
		int startsAt = 0;
		jjnewStateCnt = 68;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff) {
				ReInitRounds();
			}
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
					case 57:
						if (curChar == 42) {
							jjCheckNAddTwoStates(63, 64);
						} else if (curChar == 47) {
							jjCheckNAddStates(118, 120);
						}
						break;
					case 0:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(121, 127);
						} else if ((0x2400L & l) != 0L) {
							if (kind > 112) {
								kind = 112;
							}
							jjCheckNAdd(29);
						} else if (curChar == 47) {
							jjAddStates(128, 129);
						} else if (curChar == 36) {
							if (kind > 180) {
								kind = 180;
							}
							jjCheckNAdd(31);
						} else if (curChar == 34) {
							jjCheckNAddStates(9, 11);
						} else if (curChar == 39) {
							jjAddStates(12, 13);
						} else if (curChar == 46) {
							jjCheckNAdd(5);
						}
						if ((0x3fe000000000000L & l) != 0L) {
							if (kind > 8) {
								kind = 8;
							}
							jjCheckNAddStates(14, 16);
						} else if (curChar == 48) {
							if (kind > 8) {
								kind = 8;
							}
							jjCheckNAddStates(130, 133);
						}
						break;
					case 1:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAddStates(14, 16);
						break;
					case 4:
						if (curChar == 46) {
							jjCheckNAdd(5);
						}
						break;
					case 5:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(24, 26);
						break;
					case 7:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(8);
						}
						break;
					case 8:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(27, 29);
						break;
					case 11:
						if (curChar == 39) {
							jjAddStates(12, 13);
						}
						break;
					case 12:
						if ((0xffffff7fffffdbffL & l) != 0L) {
							jjCheckNAdd(13);
						}
						break;
					case 13:
						if (curChar == 39 && kind > 14) {
							kind = 14;
						}
						break;
					case 15:
						if ((0x8400000000L & l) != 0L) {
							jjCheckNAdd(13);
						}
						break;
					case 16:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAddTwoStates(17, 13);
						}
						break;
					case 17:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAdd(13);
						}
						break;
					case 18:
						if ((0xf000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 19;
						}
						break;
					case 19:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAdd(17);
						}
						break;
					case 20:
						if (curChar == 34) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 21:
						if ((0xfffffffbffffdbffL & l) != 0L) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 23:
						if ((0x8400000000L & l) != 0L) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 24:
						if (curChar == 34 && kind > 15) {
							kind = 15;
						}
						break;
					case 25:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAddStates(30, 33);
						}
						break;
					case 26:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 27:
						if ((0xf000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 28;
						}
						break;
					case 28:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAdd(26);
						}
						break;
					case 29:
						if ((0x2400L & l) == 0L) {
							break;
						}
						if (kind > 112) {
							kind = 112;
						}
						jjCheckNAdd(29);
						break;
					case 30:
						if (curChar != 36) {
							break;
						}
						if (kind > 180) {
							kind = 180;
						}
						jjCheckNAdd(31);
						break;
					case 31:
						if ((0x3ff001000000000L & l) == 0L) {
							break;
						}
						if (kind > 180) {
							kind = 180;
						}
						jjCheckNAdd(31);
						break;
					case 32:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(121, 127);
						}
						break;
					case 33:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddTwoStates(33, 34);
						}
						break;
					case 34:
						if (curChar != 46) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(91, 93);
						break;
					case 35:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(91, 93);
						break;
					case 37:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(38);
						}
						break;
					case 38:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(134, 136);
						break;
					case 40:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddTwoStates(40, 41);
						}
						break;
					case 42:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(43);
						}
						break;
					case 43:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(137, 139);
						break;
					case 45:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(100, 102);
						}
						break;
					case 47:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(48);
						}
						break;
					case 48:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(140, 142);
						}
						break;
					case 50:
						if (curChar != 48) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAddStates(130, 133);
						break;
					case 52:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAddStates(143, 145);
						break;
					case 54:
						if ((0xff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAddStates(146, 148);
						break;
					case 56:
						if (curChar == 47) {
							jjAddStates(128, 129);
						}
						break;
					case 58:
						if ((0xffffffffffffdbffL & l) != 0L) {
							jjCheckNAddStates(118, 120);
						}
						break;
					case 59:
						if ((0x2400L & l) != 0L && kind > 138) {
							kind = 138;
						}
						break;
					case 60:
						if (curChar == 10 && kind > 138) {
							kind = 138;
						}
						break;
					case 61:
						if (curChar == 13) {
							jjstateSet[jjnewStateCnt++] = 60;
						}
						break;
					case 62:
						if (curChar == 42) {
							jjCheckNAddTwoStates(63, 64);
						}
						break;
					case 63:
						if ((0xfffffbffffffffffL & l) != 0L) {
							jjCheckNAddTwoStates(63, 64);
						}
						break;
					case 64:
						if (curChar == 42) {
							jjCheckNAddStates(149, 151);
						}
						break;
					case 65:
						if ((0xffff7bffffffffffL & l) != 0L) {
							jjCheckNAddTwoStates(66, 64);
						}
						break;
					case 66:
						if ((0xfffffbffffffffffL & l) != 0L) {
							jjCheckNAddTwoStates(66, 64);
						}
						break;
					case 67:
						if (curChar == 47 && kind > 139) {
							kind = 139;
						}
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 0:
					case 31:
						if ((0x7fffffe87fffffeL & l) == 0L) {
							break;
						}
						if (kind > 180) {
							kind = 180;
						}
						jjCheckNAdd(31);
						break;
					case 2:
					case 53:
					case 55:
						if ((0x20000000200000L & l) == 0L) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAdd(3);
						break;
					case 3:
						if ((0x100000001000L & l) != 0L && kind > 8) {
							kind = 8;
						}
						break;
					case 6:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(58, 59);
						}
						break;
					case 9:
					case 39:
					case 44:
						if ((0x100000001000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAdd(10);
						break;
					case 10:
						if ((0x5000000050L & l) != 0L && kind > 12) {
							kind = 12;
						}
						break;
					case 12:
						if ((0xffffffffefffffffL & l) != 0L) {
							jjCheckNAdd(13);
						}
						break;
					case 14:
						if (curChar == 92) {
							jjAddStates(60, 62);
						}
						break;
					case 15:
						if ((0x14404410000000L & l) != 0L) {
							jjCheckNAdd(13);
						}
						break;
					case 21:
						if ((0xffffffffefffffffL & l) != 0L) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 22:
						if (curChar == 92) {
							jjAddStates(63, 65);
						}
						break;
					case 23:
						if ((0x14404410000000L & l) != 0L) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 36:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(152, 153);
						}
						break;
					case 41:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(154, 155);
						}
						break;
					case 46:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(156, 157);
						}
						break;
					case 49:
						if ((0x100000001000L & l) != 0L) {
							jjCheckNAdd(10);
						}
						break;
					case 51:
						if ((0x100000001000000L & l) != 0L) {
							jjCheckNAdd(52);
						}
						break;
					case 52:
						if ((0x7e0000007eL & l) == 0L) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAddStates(143, 145);
						break;
					case 58:
						jjAddStates(118, 120);
						break;
					case 63:
						jjCheckNAddTwoStates(63, 64);
						break;
					case 65:
					case 66:
						jjCheckNAddTwoStates(66, 64);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 12:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjstateSet[jjnewStateCnt++] = 13;
						}
						break;
					case 21:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjAddStates(9, 11);
						}
						break;
					case 58:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjAddStates(118, 120);
						}
						break;
					case 63:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjCheckNAddTwoStates(63, 64);
						}
						break;
					case 65:
					case 66:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjCheckNAddTwoStates(66, 64);
						}
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 68 - (jjnewStateCnt = startsAt))) {
				return curPos;
			}
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	private int jjMoveStringLiteralDfa0_5() {
		return jjMoveNfa_5(1, 0);
	}

	private int jjMoveNfa_5(int startState, int curPos) {
		int startsAt = 0;
		jjnewStateCnt = 4;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff) {
				ReInitRounds();
			}
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
					case 1:
					case 0:
						if ((0x2400L & l) == 0L) {
							break;
						}
						if (kind > 112) {
							kind = 112;
						}
						jjCheckNAdd(0);
						break;
					case 2:
						if (curChar == 13) {
							jjstateSet[jjnewStateCnt++] = 3;
						}
						break;
					case 3:
						if (curChar == 10 && kind > 126) {
							kind = 126;
						}
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 1:
						if (curChar == 92) {
							jjAddStates(158, 159);
						}
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt))) {
				return curPos;
			}
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1, long active2) {
		switch (pos) {
		case 0:
			if ((active1 & 0x8000000002L) != 0L) {
				return 5;
			}
			if ((active1 & 0x10000100L) != 0L) {
				return 68;
			}
			if ((active0 & 0xc0000001e8000000L) != 0L || (active1 & 0x1L) != 0L) {
				jjmatchedKind = 180;
				return 29;
			}
			if ((active0 & 0x4004000000L) != 0L || (active2 & 0x10050000000L) != 0L) {
				jjmatchedKind = 180;
				return 38;
			}
			if ((active0 & 0x3fffffbe13000000L) != 0L || (active2 & 0xffeffafffc000L) != 0L) {
				jjmatchedKind = 180;
				return 42;
			}
			return -1;
		case 1:
			if ((active0 & 0xa7ffffae13000000L) != 0L || (active1 & 0x1L) != 0L || (active2 & 0xffeffbfffc000L) != 0L) {
				if (jjmatchedPos != 1) {
					jjmatchedKind = 180;
					jjmatchedPos = 1;
				}
				return 42;
			}
			if ((active0 & 0x40000001e8000000L) != 0L) {
				if (jjmatchedPos != 1) {
					jjmatchedKind = 180;
					jjmatchedPos = 1;
				}
				return 79;
			}
			if ((active0 & 0x4004000000L) != 0L || (active2 & 0x10040000000L) != 0L) {
				if (jjmatchedPos != 1) {
					jjmatchedKind = 180;
					jjmatchedPos = 1;
				}
				return 37;
			}
			if ((active0 & 0x1800001000000000L) != 0L) {
				return 42;
			}
			return -1;
		case 2:
			if ((active0 & 0xe1ffffffff000000L) != 0L || (active1 & 0x1L) != 0L || (active2 & 0xfffffffffc000L) != 0L) {
				jjmatchedKind = 180;
				jjmatchedPos = 2;
				return 42;
			}
			if ((active0 & 0x600000000000000L) != 0L) {
				return 42;
			}
			return -1;
		case 3:
			if ((active0 & 0x1fe000000000000L) != 0L || (active2 & 0xb10020000000L) != 0L) {
				return 42;
			}
			if ((active0 & 0xe001ffffff000000L) != 0L || (active1 & 0x1L) != 0L || (active2 & 0xf4effdfffc000L) != 0L) {
				if (jjmatchedPos != 3) {
					jjmatchedKind = 180;
					jjmatchedPos = 3;
				}
				return 42;
			}
			return -1;
		case 4:
			if ((active0 & 0xe00007ffff000000L) != 0L || (active1 & 0x1L) != 0L || (active2 & 0x7ecffdf7fc000L) != 0L) {
				jjmatchedKind = 180;
				jjmatchedPos = 4;
				return 42;
			}
			if ((active0 & 0x1f80000000000L) != 0L || (active2 & 0x8020000800000L) != 0L) {
				return 42;
			}
			return -1;
		case 5:
			if ((active0 & 0xc000000fef000000L) != 0L || (active1 & 0x1L) != 0L || (active2 & 0x6e8e7d655c000L) != 0L) {
				jjmatchedKind = 180;
				jjmatchedPos = 5;
				return 42;
			}
			if ((active0 & 0x200007f010000000L) != 0L || (active2 & 0x10418092a0000L) != 0L) {
				return 42;
			}
			return -1;
		case 6:
			if ((active0 & 0x40000003e7000000L) != 0L || (active1 & 0x1L) != 0L || (active2 & 0x6a0e742104000L) != 0L) {
				if (jjmatchedPos != 6) {
					jjmatchedKind = 180;
					jjmatchedPos = 6;
				}
				return 42;
			}
			if ((active0 & 0x8000000c08000000L) != 0L || (active2 & 0x480094458000L) != 0L) {
				return 42;
			}
			return -1;
		case 7:
			if ((active0 & 0x4000000000000000L) != 0L || (active2 & 0x6806740000000L) != 0L) {
				if (jjmatchedPos != 7) {
					jjmatchedKind = 180;
					jjmatchedPos = 7;
				}
				return 42;
			}
			if ((active0 & 0x3e7000000L) != 0L || (active1 & 0x1L) != 0L || (active2 & 0x20800210c000L) != 0L) {
				return 42;
			}
			return -1;
		case 8:
			if ((active0 & 0x4000000140000000L) != 0L || (active2 & 0x4006700000000L) != 0L) {
				jjmatchedKind = 180;
				jjmatchedPos = 8;
				return 42;
			}
			if ((active2 & 0x2800040000000L) != 0L) {
				return 42;
			}
			return -1;
		case 9:
			if ((active0 & 0x4000000000000000L) != 0L || (active2 & 0x4006700000000L) != 0L) {
				jjmatchedKind = 180;
				jjmatchedPos = 9;
				return 42;
			}
			if ((active0 & 0x140000000L) != 0L) {
				return 42;
			}
			return -1;
		case 10:
			if ((active0 & 0x4000000000000000L) != 0L || (active2 & 0x2100000000L) != 0L) {
				jjmatchedKind = 180;
				jjmatchedPos = 10;
				return 42;
			}
			if ((active2 & 0x4004600000000L) != 0L) {
				return 42;
			}
			return -1;
		case 11:
			if ((active0 & 0x4000000000000000L) != 0L || (active2 & 0x2000000000L) != 0L) {
				jjmatchedKind = 180;
				jjmatchedPos = 11;
				return 42;
			}
			if ((active2 & 0x100000000L) != 0L) {
				return 42;
			}
			return -1;
		default:
			return -1;
		}
	}

	private final int jjStartNfa_3(int pos, long active0, long active1, long active2) {
		return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1, active2), pos + 1);
	}

	private int jjMoveStringLiteralDfa0_3() {
		switch (curChar) {
		case 10:
			return jjStopAtPos(0, 134);
		case 13:
			return jjStopAtPos(0, 135);
		case 33:
			jjmatchedKind = 98;
			return jjMoveStringLiteralDfa1_3(0x0L, 0x20000L, 0x0L);
		case 37:
			jjmatchedKind = 93;
			return jjMoveStringLiteralDfa1_3(0x0L, 0x200L, 0x0L);
		case 38:
			jjmatchedKind = 95;
			return jjMoveStringLiteralDfa1_3(0x0L, 0x1020L, 0x0L);
		case 40:
			return jjStopAtPos(0, 104);
		case 41:
			return jjStopAtPos(0, 105);
		case 42:
			jjmatchedKind = 91;
			return jjMoveStringLiteralDfa1_3(0x0L, 0x80L, 0x0L);
		case 43:
			jjmatchedKind = 89;
			return jjMoveStringLiteralDfa1_3(0x0L, 0x200400L, 0x0L);
		case 44:
			return jjStopAtPos(0, 110);
		case 45:
			jjmatchedKind = 90;
			return jjMoveStringLiteralDfa1_3(0x0L, 0x500800L, 0x0L);
		case 46:
			jjmatchedKind = 103;
			return jjMoveStringLiteralDfa1_3(0x0L, 0x2L, 0x0L);
		case 47:
			jjmatchedKind = 92;
			return jjMoveStringLiteralDfa1_3(0x0L, 0x100L, 0x0L);
		case 58:
			return jjStopAtPos(0, 100);
		case 59:
			return jjStopAtPos(0, 101);
		case 60:
			jjmatchedKind = 88;
			return jjMoveStringLiteralDfa1_3(0x0L, 0x88004L, 0x0L);
		case 61:
			jjmatchedKind = 94;
			return jjMoveStringLiteralDfa1_3(0x0L, 0x10L, 0x0L);
		case 62:
			jjmatchedKind = 87;
			return jjMoveStringLiteralDfa1_3(0x0L, 0x50008L, 0x0L);
		case 63:
			return jjStopAtPos(0, 102);
		case 91:
			return jjStopAtPos(0, 106);
		case 93:
			return jjStopAtPos(0, 107);
		case 94:
			jjmatchedKind = 97;
			return jjMoveStringLiteralDfa1_3(0x0L, 0x2000L, 0x0L);
		case 95:
			return jjMoveStringLiteralDfa1_3(0xc0000001e8000000L, 0x1L, 0x0L);
		case 97:
			return jjMoveStringLiteralDfa1_3(0x20000000000000L, 0x0L, 0x200000L);
		case 98:
			return jjMoveStringLiteralDfa1_3(0x100000000000L, 0x0L, 0x400000L);
		case 99:
			return jjMoveStringLiteralDfa1_3(0x84400001000000L, 0x0L, 0x89400100000L);
		case 100:
			return jjMoveStringLiteralDfa1_3(0x1000001800000000L, 0x0L, 0x400004000000L);
		case 101:
			return jjMoveStringLiteralDfa1_3(0x12008000000000L, 0x0L, 0x0L);
		case 102:
			return jjMoveStringLiteralDfa1_3(0x200800000000000L, 0x0L, 0x8000100800000L);
		case 103:
			return jjMoveStringLiteralDfa1_3(0x100000000000000L, 0x0L, 0x8000000L);
		case 105:
			return jjMoveStringLiteralDfa1_3(0xc00000010000000L, 0x0L, 0x4000000000000L);
		case 108:
			return jjMoveStringLiteralDfa1_3(0x8000000000000L, 0x0L, 0x200000000L);
		case 109:
			return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x2000000080000L);
		case 110:
			return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x4021000000L);
		case 111:
			return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x40000L);
		case 112:
			return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x80004000L);
		case 114:
			return jjMoveStringLiteralDfa1_3(0x4004000000L, 0x0L, 0x10050000000L);
		case 115:
			return jjMoveStringLiteralDfa1_3(0x2001072000000000L, 0x0L, 0x802038000L);
		case 116:
			return jjMoveStringLiteralDfa1_3(0x400000000L, 0x0L, 0xb02000000000L);
		case 117:
			return jjMoveStringLiteralDfa1_3(0x200200000000L, 0x0L, 0x1040000000000L);
		case 118:
			return jjMoveStringLiteralDfa1_3(0x40000002000000L, 0x0L, 0x0L);
		case 119:
			return jjMoveStringLiteralDfa1_3(0x80000000000L, 0x0L, 0x20000000000L);
		case 123:
			return jjStopAtPos(0, 108);
		case 124:
			jjmatchedKind = 96;
			return jjMoveStringLiteralDfa1_3(0x0L, 0x4040L, 0x0L);
		case 125:
			return jjStopAtPos(0, 109);
		case 126:
			return jjStopAtPos(0, 99);
		default:
			return jjMoveNfa_3(0, 0);
		}
	}

	private int jjMoveStringLiteralDfa1_3(long active0, long active1, long active2) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_3(0, active0, active1, active2);
			return 1;
		}
		switch (curChar) {
		case 38:
			if ((active1 & 0x20L) != 0L) {
				return jjStopAtPos(1, 69);
			}
			break;
		case 43:
			if ((active1 & 0x200000L) != 0L) {
				return jjStopAtPos(1, 85);
			}
			break;
		case 45:
			if ((active1 & 0x400000L) != 0L) {
				return jjStopAtPos(1, 86);
			}
			break;
		case 46:
			return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x2L, active2, 0L);
		case 60:
			if ((active1 & 0x8000L) != 0L) {
				jjmatchedKind = 79;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x4L, active2, 0L);
		case 61:
			if ((active1 & 0x10L) != 0L) {
				return jjStopAtPos(1, 68);
			} else if ((active1 & 0x80L) != 0L) {
				return jjStopAtPos(1, 71);
			} else if ((active1 & 0x100L) != 0L) {
				return jjStopAtPos(1, 72);
			} else if ((active1 & 0x200L) != 0L) {
				return jjStopAtPos(1, 73);
			} else if ((active1 & 0x400L) != 0L) {
				return jjStopAtPos(1, 74);
			} else if ((active1 & 0x800L) != 0L) {
				return jjStopAtPos(1, 75);
			} else if ((active1 & 0x1000L) != 0L) {
				return jjStopAtPos(1, 76);
			} else if ((active1 & 0x2000L) != 0L) {
				return jjStopAtPos(1, 77);
			} else if ((active1 & 0x4000L) != 0L) {
				return jjStopAtPos(1, 78);
			} else if ((active1 & 0x20000L) != 0L) {
				return jjStopAtPos(1, 81);
			} else if ((active1 & 0x40000L) != 0L) {
				return jjStopAtPos(1, 82);
			} else if ((active1 & 0x80000L) != 0L) {
				return jjStopAtPos(1, 83);
			}
			break;
		case 62:
			if ((active1 & 0x10000L) != 0L) {
				jjmatchedKind = 80;
				jjmatchedPos = 1;
			} else if ((active1 & 0x100000L) != 0L) {
				return jjStopAtPos(1, 84);
			}
			return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x8L, active2, 0L);
		case 65:
			return jjMoveStringLiteralDfa2_3(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
		case 67:
			return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x1L, active2, 0L);
		case 95:
			return jjMoveStringLiteralDfa2_3(active0, 0x40000001e8000000L, active1, 0L, active2, 0L);
		case 97:
			return jjMoveStringLiteralDfa2_3(active0, 0x4000000000000L, active1, 0L, active2, 0xb80200484000L);
		case 99:
			return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0L, active2, 0x2000000L);
		case 101:
			return jjMoveStringLiteralDfa2_3(active0, 0x4804000000L, active1, 0L, active2, 0x2410040018000L);
		case 102:
			if ((active0 & 0x800000000000000L) != 0L) {
				return jjStartNfaWithStates_3(1, 59, 42);
			}
			break;
		case 104:
			return jjMoveStringLiteralDfa2_3(active0, 0x81080000000000L, active1, 0L, active2, 0x2800000000L);
		case 105:
			return jjMoveStringLiteralDfa2_3(active0, 0x2000040000000000L, active1, 0L, active2, 0x8000100020000L);
		case 108:
			return jjMoveStringLiteralDfa2_3(active0, 0x2800000000000L, active1, 0L, active2, 0x800000L);
		case 110:
			return jjMoveStringLiteralDfa2_3(active0, 0x410200210000000L, active1, 0L, active2, 0x5000000000000L);
		case 111:
			if ((active0 & 0x1000000000000000L) != 0L) {
				jjmatchedKind = 60;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_3(active0, 0x348401003000000L, active1, 0L, active2, 0x9421000000L);
		case 112:
			return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0L, active2, 0x40000000000L);
		case 114:
			return jjMoveStringLiteralDfa2_3(active0, 0x100000000000L, active1, 0L, active2, 0x20080140000L);
		case 116:
			return jjMoveStringLiteralDfa2_3(active0, 0x30000000000L, active1, 0L, active2, 0x200000L);
		case 117:
			return jjMoveStringLiteralDfa2_3(active0, 0x20000000000000L, active1, 0L, active2, 0x4018000000L);
		case 119:
			return jjMoveStringLiteralDfa2_3(active0, 0x2000000000L, active1, 0L, active2, 0L);
		case 120:
			return jjMoveStringLiteralDfa2_3(active0, 0x8000000000L, active1, 0L, active2, 0L);
		case 121:
			return jjMoveStringLiteralDfa2_3(active0, 0x400000000L, active1, 0L, active2, 0x4000000L);
		case 124:
			if ((active1 & 0x40L) != 0L) {
				return jjStopAtPos(1, 70);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_3(0, active0, active1, active2);
	}

	private int jjMoveStringLiteralDfa2_3(long old0, long active0, long old1, long active1, long old2, long active2) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_3(0, old0, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_3(1, active0, active1, active2);
			return 2;
		}
		switch (curChar) {
		case 46:
			if ((active1 & 0x2L) != 0L) {
				return jjStopAtPos(2, 65);
			}
			break;
		case 61:
			if ((active1 & 0x4L) != 0L) {
				return jjStopAtPos(2, 66);
			} else if ((active1 & 0x8L) != 0L) {
				return jjStopAtPos(2, 67);
			}
			break;
		case 97:
			return jjMoveStringLiteralDfa3_3(active0, 0x80020000000000L, active1, 0L, active2, 0x10800000000L);
		case 99:
			return jjMoveStringLiteralDfa3_3(active0, 0x8000000L, active1, 0L, active2, 0x400000018000L);
		case 100:
			return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0L, active2, 0x40040040000L);
		case 101:
			return jjMoveStringLiteralDfa3_3(active0, 0x4000100000000000L, active1, 0L, active2, 0L);
		case 102:
			return jjMoveStringLiteralDfa3_3(active0, 0x800000000L, active1, 0L, active2, 0L);
		case 103:
			return jjMoveStringLiteralDfa3_3(active0, 0x40004000000L, active1, 0L, active2, 0L);
		case 104:
			return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0L, active2, 0x2000000L);
		case 105:
			return jjMoveStringLiteralDfa3_3(active0, 0x40282060000000L, active1, 0L, active2, 0x4020088100000L);
		case 108:
			return jjMoveStringLiteralDfa3_3(active0, 0x12000000L, active1, 0L, active2, 0x8000000000L);
		case 109:
			return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0L, active2, 0x4000000000L);
		case 110:
			return jjMoveStringLiteralDfa3_3(active0, 0x8400001000000L, active1, 0L, active2, 0x8000034020000L);
		case 111:
			return jjMoveStringLiteralDfa3_3(active0, 0x1800000000000L, active1, 0x1L, active2, 0x200000L);
		case 112:
			return jjMoveStringLiteralDfa3_3(active0, 0x400000000L, active1, 0L, active2, 0x81400000000L);
		case 114:
			if ((active0 & 0x200000000000000L) != 0L) {
				return jjStartNfaWithStates_3(2, 57, 42);
			}
			return jjMoveStringLiteralDfa3_3(active0, 0x10000000000L, active1, 0L, active2, 0x2002100404000L);
		case 115:
			return jjMoveStringLiteralDfa3_3(active0, 0x6000380000000L, active1, 0L, active2, 0xb00200080000L);
		case 116:
			if ((active0 & 0x400000000000000L) != 0L) {
				return jjStartNfaWithStates_3(2, 58, 42);
			}
			return jjMoveStringLiteralDfa3_3(active0, 0x812000c000000000L, active1, 0L, active2, 0x1000000000000L);
		case 117:
			return jjMoveStringLiteralDfa3_3(active0, 0x10001000000000L, active1, 0L, active2, 0x800000L);
		case 119:
			return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0L, active2, 0x1000000L);
		case 122:
			return jjMoveStringLiteralDfa3_3(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
		default:
			break;
		}
		return jjStartNfa_3(1, active0, active1, active2);
	}

	private int jjMoveStringLiteralDfa3_3(long old0, long active0, long old1, long active1, long old2, long active2) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_3(1, old0, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_3(2, active0, active1, active2);
			return 3;
		}
		switch (curChar) {
		case 95:
			return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0L, active2, 0x4000000000L);
		case 97:
			return jjMoveStringLiteralDfa4_3(active0, 0x900802000000L, active1, 0L, active2, 0x8040005004000L);
		case 98:
			return jjMoveStringLiteralDfa4_3(active0, 0x1000000000L, active1, 0L, active2, 0L);
		case 100:
			if ((active0 & 0x40000000000000L) != 0L) {
				return jjStartNfaWithStates_3(3, 54, 42);
			} else if ((active2 & 0x10000000000L) != 0L) {
				return jjStartNfaWithStates_3(3, 168, 42);
			}
			return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0L, active2, 0x8000000L);
		case 101:
			if ((active0 & 0x2000000000000L) != 0L) {
				return jjStartNfaWithStates_3(3, 49, 42);
			} else if ((active0 & 0x4000000000000L) != 0L) {
				return jjStartNfaWithStates_3(3, 50, 42);
			} else if ((active2 & 0x20000000L) != 0L) {
				return jjStartNfaWithStates_3(3, 157, 42);
			}
			return jjMoveStringLiteralDfa4_3(active0, 0x2000008400000000L, active1, 0L, active2, 0x2002040000L);
		case 103:
			if ((active0 & 0x8000000000000L) != 0L) {
				return jjStartNfaWithStates_3(3, 51, 42);
			}
			return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0L, active2, 0x2000000020000L);
		case 105:
			return jjMoveStringLiteralDfa4_3(active0, 0x394000000L, active1, 0L, active2, 0x1000000000000L);
		case 107:
			if ((active2 & 0x100000000000L) != 0L) {
				jjmatchedKind = 172;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0L, active2, 0xa00000000000L);
		case 108:
			return jjMoveStringLiteralDfa4_3(active0, 0x80000000000L, active1, 0L, active2, 0x408000000000L);
		case 109:
			if ((active0 & 0x10000000000000L) != 0L) {
				return jjStartNfaWithStates_3(3, 52, 42);
			}
			return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0x1L, active2, 0x200000L);
		case 110:
			return jjMoveStringLiteralDfa4_3(active0, 0x40060000000L, active1, 0L, active2, 0L);
		case 111:
			if ((active0 & 0x20000000000000L) != 0L) {
				return jjStartNfaWithStates_3(3, 53, 42);
			} else if ((active0 & 0x100000000000000L) != 0L) {
				return jjStartNfaWithStates_3(3, 56, 42);
			}
			return jjMoveStringLiteralDfa4_3(active0, 0x8000200008000000L, active1, 0L, active2, 0L);
		case 114:
			if ((active0 & 0x80000000000000L) != 0L) {
				return jjStartNfaWithStates_3(3, 55, 42);
			}
			return jjMoveStringLiteralDfa4_3(active0, 0x1000000000000L, active1, 0L, active2, 0x800400000L);
		case 115:
			return jjMoveStringLiteralDfa4_3(active0, 0x400000000000L, active1, 0L, active2, 0x100800000L);
		case 116:
			return jjMoveStringLiteralDfa4_3(active0, 0x22001000000L, active1, 0L, active2, 0x40a0210198000L);
		case 117:
			return jjMoveStringLiteralDfa4_3(active0, 0x14000000000L, active1, 0L, active2, 0x40000000L);
		case 118:
			return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0L, active2, 0x80000000L);
		case 120:
			return jjMoveStringLiteralDfa4_3(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
		case 121:
			return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0L, active2, 0x1400000000L);
		default:
			break;
		}
		return jjStartNfa_3(2, active0, active1, active2);
	}

	private int jjMoveStringLiteralDfa4_3(long old0, long active0, long old1, long active1, long old2, long active2) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_3(2, old0, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_3(3, active0, active1, active2);
			return 4;
		}
		switch (curChar) {
		case 97:
			return jjMoveStringLiteralDfa5_3(active0, 0L, active1, 0L, active2, 0x40a080000000L);
		case 99:
			return jjMoveStringLiteralDfa5_3(active0, 0x12000000000L, active1, 0L, active2, 0x40000000L);
		case 100:
			return jjMoveStringLiteralDfa5_3(active0, 0x400000000L, active1, 0L, active2, 0x2000000L);
		case 101:
			if ((active0 & 0x80000000000L) != 0L) {
				return jjStartNfaWithStates_3(4, 43, 42);
			} else if ((active2 & 0x20000000000L) != 0L) {
				return jjStartNfaWithStates_3(4, 169, 42);
			}
			return jjMoveStringLiteralDfa5_3(active0, 0x40000000000L, active1, 0L, active2, 0x3000808080000L);
		case 103:
			return jjMoveStringLiteralDfa5_3(active0, 0x380000000L, active1, 0L, active2, 0L);
		case 104:
			if ((active2 & 0x800000L) != 0L) {
				return jjStartNfaWithStates_3(4, 151, 42);
			}
			break;
		case 105:
			return jjMoveStringLiteralDfa5_3(active0, 0x20001000000L, active1, 0L, active2, 0x4001011718000L);
		case 107:
			if ((active0 & 0x100000000000L) != 0L) {
				return jjStartNfaWithStates_3(4, 44, 42);
			}
			break;
		case 108:
			if ((active2 & 0x8000000000000L) != 0L) {
				return jjStartNfaWithStates_3(4, 179, 42);
			}
			return jjMoveStringLiteralDfa5_3(active0, 0x1060000000L, active1, 0L, active2, 0x24000L);
		case 109:
			return jjMoveStringLiteralDfa5_3(active0, 0x8000000000000000L, active1, 0L, active2, 0x4000000L);
		case 110:
			if ((active0 & 0x200000000000L) != 0L) {
				return jjStartNfaWithStates_3(4, 45, 42);
			}
			return jjMoveStringLiteralDfa5_3(active0, 0x18000000L, active1, 0L, active2, 0L);
		case 111:
			return jjMoveStringLiteralDfa5_3(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
		case 112:
			return jjMoveStringLiteralDfa5_3(active0, 0L, active1, 0x1L, active2, 0x600000000L);
		case 114:
			return jjMoveStringLiteralDfa5_3(active0, 0xc000000000L, active1, 0L, active2, 0x40000L);
		case 115:
			return jjMoveStringLiteralDfa5_3(active0, 0x4000000L, active1, 0L, active2, 0L);
		case 116:
			if ((active0 & 0x400000000000L) != 0L) {
				return jjStartNfaWithStates_3(4, 46, 42);
			} else if ((active0 & 0x800000000000L) != 0L) {
				return jjStartNfaWithStates_3(4, 47, 42);
			} else if ((active0 & 0x1000000000000L) != 0L) {
				return jjStartNfaWithStates_3(4, 48, 42);
			}
			return jjMoveStringLiteralDfa5_3(active0, 0x4000000002000000L, active1, 0L, active2, 0x44100000000L);
		case 117:
			return jjMoveStringLiteralDfa5_3(active0, 0x800000000L, active1, 0L, active2, 0x80000000000L);
		case 119:
			return jjMoveStringLiteralDfa5_3(active0, 0L, active1, 0L, active2, 0x200000000000L);
		case 121:
			return jjMoveStringLiteralDfa5_3(active0, 0L, active1, 0L, active2, 0x800000000000L);
		default:
			break;
		}
		return jjStartNfa_3(3, active0, active1, active2);
	}

	private int jjMoveStringLiteralDfa5_3(long old0, long active0, long old1, long active1, long old2, long active2) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_3(3, old0, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_3(4, active0, active1, active2);
			return 5;
		}
		switch (curChar) {
		case 97:
			return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0L, active2, 0x6200000000000L);
		case 99:
			if ((active0 & 0x20000000000L) != 0L) {
				return jjStartNfaWithStates_3(5, 41, 42);
			} else if ((active2 & 0x200000L) != 0L) {
				return jjStartNfaWithStates_3(5, 149, 42);
			}
			return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0L, active2, 0x100000L);
		case 100:
			if ((active0 & 0x40000000000L) != 0L) {
				return jjStartNfaWithStates_3(5, 42, 42);
			} else if ((active2 & 0x8000000L) != 0L) {
				return jjStartNfaWithStates_3(5, 155, 42);
			} else if ((active2 & 0x800000000L) != 0L) {
				return jjStartNfaWithStates_3(5, 163, 42);
			} else if ((active2 & 0x1000000000000L) != 0L) {
				return jjStartNfaWithStates_3(5, 176, 42);
			}
			return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0L, active2, 0x2000000000L);
		case 101:
			if ((active0 & 0x10000000L) != 0L) {
				return jjStartNfaWithStates_3(5, 28, 42);
			} else if ((active0 & 0x1000000000L) != 0L) {
				return jjStartNfaWithStates_3(5, 36, 42);
			} else if ((active2 & 0x20000L) != 0L) {
				return jjStartNfaWithStates_3(5, 145, 42);
			} else if ((active2 & 0x40000000000L) != 0L) {
				return jjStartNfaWithStates_3(5, 170, 42);
			}
			return jjMoveStringLiteralDfa6_3(active0, 0x4000000400000000L, active1, 0L, active2, 0x440000L);
		case 102:
			if ((active0 & 0x2000000000000000L) != 0L) {
				return jjStartNfaWithStates_3(5, 61, 42);
			}
			break;
		case 104:
			if ((active0 & 0x2000000000L) != 0L) {
				return jjStartNfaWithStates_3(5, 37, 42);
			}
			return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0L, active2, 0x4000000000L);
		case 105:
			return jjMoveStringLiteralDfa6_3(active0, 0x8000000062000000L, active1, 0L, active2, 0x800004000000L);
		case 108:
			return jjMoveStringLiteralDfa6_3(active0, 0x800000000L, active1, 0x1L, active2, 0x4000L);
		case 109:
			return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0L, active2, 0x10000000L);
		case 110:
			if ((active0 & 0x4000000000L) != 0L) {
				return jjStartNfaWithStates_3(5, 38, 42);
			} else if ((active0 & 0x8000000000L) != 0L) {
				return jjStartNfaWithStates_3(5, 39, 42);
			} else if ((active2 & 0x1000000000L) != 0L) {
				return jjStartNfaWithStates_3(5, 164, 42);
			}
			return jjMoveStringLiteralDfa6_3(active0, 0x381000000L, active1, 0L, active2, 0L);
		case 111:
			return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0L, active2, 0x18000L);
		case 112:
			return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0L, active2, 0x8100000000L);
		case 114:
			if ((active2 & 0x80000L) != 0L) {
				return jjStartNfaWithStates_3(5, 147, 42);
			}
			return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0L, active2, 0x480600000000L);
		case 115:
			return jjMoveStringLiteralDfa6_3(active0, 0x8000000L, active1, 0L, active2, 0L);
		case 116:
			if ((active0 & 0x10000000000L) != 0L) {
				return jjStartNfaWithStates_3(5, 40, 42);
			} else if ((active2 & 0x1000000L) != 0L) {
				return jjStartNfaWithStates_3(5, 152, 42);
			}
			return jjMoveStringLiteralDfa6_3(active0, 0x4000000L, active1, 0L, active2, 0xc0000000L);
		case 117:
			return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0L, active2, 0x2000000L);
		default:
			break;
		}
		return jjStartNfa_3(4, active0, active1, active2);
	}

	private int jjMoveStringLiteralDfa6_3(long old0, long active0, long old1, long active1, long old2, long active2) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_3(4, old0, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_3(5, active0, active1, active2);
			return 6;
		}
		switch (curChar) {
		case 97:
			return jjMoveStringLiteralDfa7_3(active0, 0L, active1, 0L, active2, 0x100000L);
		case 98:
			return jjMoveStringLiteralDfa7_3(active0, 0L, active1, 0L, active2, 0x2000000000000L);
		case 99:
			if ((active0 & 0x8000000000000000L) != 0L) {
				return jjStartNfaWithStates_3(6, 63, 42);
			} else if ((active2 & 0x4000000L) != 0L) {
				return jjStartNfaWithStates_3(6, 154, 42);
			}
			break;
		case 100:
			if ((active2 & 0x40000L) != 0L) {
				return jjStartNfaWithStates_3(6, 146, 42);
			}
			break;
		case 101:
			if ((active2 & 0x10000000L) != 0L) {
				return jjStartNfaWithStates_3(6, 156, 42);
			} else if ((active2 & 0x80000000L) != 0L) {
				return jjStartNfaWithStates_3(6, 159, 42);
			} else if ((active2 & 0x80000000000L) != 0L) {
				return jjStartNfaWithStates_3(6, 171, 42);
			} else if ((active2 & 0x400000000000L) != 0L) {
				return jjStartNfaWithStates_3(6, 174, 42);
			}
			return jjMoveStringLiteralDfa7_3(active0, 0x384000000L, active1, 0x1L, active2, 0x800000004000L);
		case 102:
			if ((active0 & 0x400000000L) != 0L) {
				return jjStartNfaWithStates_3(6, 34, 42);
			}
			break;
		case 105:
			return jjMoveStringLiteralDfa7_3(active0, 0L, active1, 0L, active2, 0x200640000000L);
		case 108:
			return jjMoveStringLiteralDfa7_3(active0, 0x2000000L, active1, 0L, active2, 0x4000002000000L);
		case 110:
			if ((active2 & 0x10000L) != 0L) {
				jjmatchedKind = 144;
				jjmatchedPos = 6;
			}
			return jjMoveStringLiteralDfa7_3(active0, 0x4000000060000000L, active1, 0L, active2, 0x8000L);
		case 112:
			return jjMoveStringLiteralDfa7_3(active0, 0L, active1, 0L, active2, 0x2000000000L);
		case 114:
			if ((active2 & 0x400000L) != 0L) {
				return jjStartNfaWithStates_3(6, 150, 42);
			}
			return jjMoveStringLiteralDfa7_3(active0, 0L, active1, 0L, active2, 0x4100000000L);
		case 115:
			return jjMoveStringLiteralDfa7_3(active0, 0L, active1, 0L, active2, 0x8000000000L);
		case 116:
			if ((active0 & 0x8000000L) != 0L) {
				return jjStartNfaWithStates_3(6, 27, 42);
			} else if ((active0 & 0x800000000L) != 0L) {
				return jjStartNfaWithStates_3(6, 35, 42);
			}
			break;
		case 117:
			return jjMoveStringLiteralDfa7_3(active0, 0x1000000L, active1, 0L, active2, 0L);
		default:
			break;
		}
		return jjStartNfa_3(5, active0, active1, active2);
	}

	private int jjMoveStringLiteralDfa7_3(long old0, long active0, long old1, long active1, long old2, long active2) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_3(5, old0, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_3(6, active0, active1, active2);
			return 7;
		}
		switch (curChar) {
		case 100:
			if ((active0 & 0x80000000L) != 0L) {
				jjmatchedKind = 31;
				jjmatchedPos = 7;
			} else if ((active0 & 0x200000000L) != 0L) {
				return jjStartNfaWithStates_3(7, 33, 42);
			}
			return jjMoveStringLiteralDfa8_3(active0, 0x100000000L, active1, 0L, active2, 0L);
		case 101:
			if ((active0 & 0x1000000L) != 0L) {
				return jjStartNfaWithStates_3(7, 24, 42);
			} else if ((active0 & 0x2000000L) != 0L) {
				return jjStartNfaWithStates_3(7, 25, 42);
			} else if ((active0 & 0x20000000L) != 0L) {
				jjmatchedKind = 29;
				jjmatchedPos = 7;
			} else if ((active2 & 0x2000000L) != 0L) {
				return jjStartNfaWithStates_3(7, 153, 42);
			} else if ((active2 & 0x8000000000L) != 0L) {
				return jjStartNfaWithStates_3(7, 167, 42);
			}
			return jjMoveStringLiteralDfa8_3(active0, 0x40000000L, active1, 0L, active2, 0x4000000000L);
		case 105:
			return jjMoveStringLiteralDfa8_3(active0, 0L, active1, 0L, active2, 0x4000100000000L);
		case 108:
			if ((active2 & 0x4000L) != 0L) {
				return jjStartNfaWithStates_3(7, 142, 42);
			} else if ((active2 & 0x100000L) != 0L) {
				return jjStartNfaWithStates_3(7, 148, 42);
			}
			return jjMoveStringLiteralDfa8_3(active0, 0L, active1, 0L, active2, 0x2800000000000L);
		case 111:
			return jjMoveStringLiteralDfa8_3(active0, 0L, active1, 0L, active2, 0x40000000L);
		case 114:
			if ((active0 & 0x4000000L) != 0L) {
				return jjStartNfaWithStates_3(7, 26, 42);
			}
			return jjMoveStringLiteralDfa8_3(active0, 0L, active1, 0L, active2, 0x2000000000L);
		case 115:
			if ((active2 & 0x8000L) != 0L) {
				return jjStartNfaWithStates_3(7, 143, 42);
			}
			return jjMoveStringLiteralDfa8_3(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
		case 116:
			if ((active2 & 0x200000000000L) != 0L) {
				return jjStartNfaWithStates_3(7, 173, 42);
			}
			break;
		case 118:
			return jjMoveStringLiteralDfa8_3(active0, 0L, active1, 0L, active2, 0x600000000L);
		case 120:
			if ((active1 & 0x1L) != 0L) {
				return jjStartNfaWithStates_3(7, 64, 42);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_3(6, active0, active1, active2);
	}

	private int jjMoveStringLiteralDfa8_3(long old0, long active0, long old1, long active1, long old2, long active2) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L) {
			return jjStartNfa_3(6, old0, old1, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_3(7, active0, 0L, active2);
			return 8;
		}
		switch (curChar) {
		case 95:
			return jjMoveStringLiteralDfa9_3(active0, 0x140000000L, active2, 0L);
		case 97:
			return jjMoveStringLiteralDfa9_3(active0, 0L, active2, 0x4600000000L);
		case 100:
			if ((active2 & 0x800000000000L) != 0L) {
				return jjStartNfaWithStates_3(8, 175, 42);
			}
			break;
		case 101:
			if ((active2 & 0x2000000000000L) != 0L) {
				return jjStartNfaWithStates_3(8, 177, 42);
			}
			break;
		case 105:
			return jjMoveStringLiteralDfa9_3(active0, 0x4000000000000000L, active2, 0x2000000000L);
		case 110:
			if ((active2 & 0x40000000L) != 0L) {
				return jjStartNfaWithStates_3(8, 158, 42);
			}
			break;
		case 118:
			return jjMoveStringLiteralDfa9_3(active0, 0L, active2, 0x100000000L);
		case 122:
			return jjMoveStringLiteralDfa9_3(active0, 0L, active2, 0x4000000000000L);
		default:
			break;
		}
		return jjStartNfa_3(7, active0, 0L, active2);
	}

	private int jjMoveStringLiteralDfa9_3(long old0, long active0, long old2, long active2) {
		if (((active0 &= old0) | (active2 &= old2)) == 0L) {
			return jjStartNfa_3(7, old0, 0L, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_3(8, active0, 0L, active2);
			return 9;
		}
		switch (curChar) {
		case 95:
			if ((active0 & 0x40000000L) != 0L) {
				return jjStartNfaWithStates_3(9, 30, 42);
			} else if ((active0 & 0x100000000L) != 0L) {
				return jjStartNfaWithStates_3(9, 32, 42);
			}
			break;
		case 97:
			return jjMoveStringLiteralDfa10_3(active0, 0L, active2, 0x100000000L);
		case 100:
			return jjMoveStringLiteralDfa10_3(active0, 0L, active2, 0x4000000000L);
		case 101:
			return jjMoveStringLiteralDfa10_3(active0, 0L, active2, 0x4000000000000L);
		case 111:
			return jjMoveStringLiteralDfa10_3(active0, 0x4000000000000000L, active2, 0L);
		case 116:
			return jjMoveStringLiteralDfa10_3(active0, 0L, active2, 0x600000000L);
		case 118:
			return jjMoveStringLiteralDfa10_3(active0, 0L, active2, 0x2000000000L);
		default:
			break;
		}
		return jjStartNfa_3(8, active0, 0L, active2);
	}

	private int jjMoveStringLiteralDfa10_3(long old0, long active0, long old2, long active2) {
		if (((active0 &= old0) | (active2 &= old2)) == 0L) {
			return jjStartNfa_3(8, old0, 0L, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_3(9, active0, 0L, active2);
			return 10;
		}
		switch (curChar) {
		case 97:
			return jjMoveStringLiteralDfa11_3(active0, 0L, active2, 0x2000000000L);
		case 101:
			if ((active2 & 0x200000000L) != 0L) {
				return jjStartNfaWithStates_3(10, 161, 42);
			} else if ((active2 & 0x400000000L) != 0L) {
				return jjStartNfaWithStates_3(10, 162, 42);
			}
			break;
		case 110:
			return jjMoveStringLiteralDfa11_3(active0, 0x4000000000000000L, active2, 0L);
		case 114:
			if ((active2 & 0x4000000000000L) != 0L) {
				return jjStartNfaWithStates_3(10, 178, 42);
			}
			break;
		case 115:
			if ((active2 & 0x4000000000L) != 0L) {
				return jjStartNfaWithStates_3(10, 166, 42);
			}
			break;
		case 116:
			return jjMoveStringLiteralDfa11_3(active0, 0L, active2, 0x100000000L);
		default:
			break;
		}
		return jjStartNfa_3(9, active0, 0L, active2);
	}

	private int jjMoveStringLiteralDfa11_3(long old0, long active0, long old2, long active2) {
		if (((active0 &= old0) | (active2 &= old2)) == 0L) {
			return jjStartNfa_3(9, old0, 0L, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_3(10, active0, 0L, active2);
			return 11;
		}
		switch (curChar) {
		case 95:
			return jjMoveStringLiteralDfa12_3(active0, 0x4000000000000000L, active2, 0L);
		case 101:
			if ((active2 & 0x100000000L) != 0L) {
				return jjStartNfaWithStates_3(11, 160, 42);
			}
			break;
		case 116:
			return jjMoveStringLiteralDfa12_3(active0, 0L, active2, 0x2000000000L);
		default:
			break;
		}
		return jjStartNfa_3(10, active0, 0L, active2);
	}

	private int jjMoveStringLiteralDfa12_3(long old0, long active0, long old2, long active2) {
		if (((active0 &= old0) | (active2 &= old2)) == 0L) {
			return jjStartNfa_3(10, old0, 0L, old2);
		}
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_3(11, active0, 0L, active2);
			return 12;
		}
		switch (curChar) {
		case 95:
			if ((active0 & 0x4000000000000000L) != 0L) {
				return jjStartNfaWithStates_3(12, 62, 42);
			}
			break;
		case 101:
			if ((active2 & 0x2000000000L) != 0L) {
				return jjStartNfaWithStates_3(12, 165, 42);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_3(11, active0, 0L, active2);
	}

	private int jjStartNfaWithStates_3(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_3(state, pos + 1);
	}

	private int jjMoveNfa_3(int startState, int curPos) {
		int startsAt = 0;
		jjnewStateCnt = 79;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff) {
				ReInitRounds();
			}
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
					case 38:
					case 42:
						if ((0x3ff001000000000L & l) == 0L) {
							break;
						}
						if (kind > 180) {
							kind = 180;
						}
						jjCheckNAdd(42);
						break;
					case 37:
						if ((0x3ff001000000000L & l) == 0L) {
							break;
						}
						if (kind > 180) {
							kind = 180;
						}
						jjCheckNAdd(42);
						break;
					case 0:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(0, 6);
						} else if (curChar == 47) {
							jjAddStates(7, 8);
						} else if (curChar == 36) {
							if (kind > 180) {
								kind = 180;
							}
							jjCheckNAdd(42);
						} else if (curChar == 34) {
							jjCheckNAddStates(9, 11);
						} else if (curChar == 39) {
							jjAddStates(12, 13);
						} else if (curChar == 46) {
							jjCheckNAdd(5);
						}
						if ((0x3fe000000000000L & l) != 0L) {
							if (kind > 8) {
								kind = 8;
							}
							jjCheckNAddStates(14, 16);
						} else if (curChar == 48) {
							if (kind > 8) {
								kind = 8;
							}
							jjCheckNAddStates(17, 20);
						}
						break;
					case 68:
						if (curChar == 42) {
							jjCheckNAddTwoStates(74, 75);
						} else if (curChar == 47) {
							jjCheckNAddStates(21, 23);
						}
						break;
					case 29:
						if ((0x3ff001000000000L & l) == 0L) {
							break;
						}
						if (kind > 180) {
							kind = 180;
						}
						jjCheckNAdd(42);
						break;
					case 79:
						if ((0x3ff001000000000L & l) == 0L) {
							break;
						}
						if (kind > 180) {
							kind = 180;
						}
						jjCheckNAdd(42);
						break;
					case 1:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAddStates(14, 16);
						break;
					case 4:
						if (curChar == 46) {
							jjCheckNAdd(5);
						}
						break;
					case 5:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(24, 26);
						break;
					case 7:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(8);
						}
						break;
					case 8:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(27, 29);
						break;
					case 11:
						if (curChar == 39) {
							jjAddStates(12, 13);
						}
						break;
					case 12:
						if ((0xffffff7fffffdbffL & l) != 0L) {
							jjCheckNAdd(13);
						}
						break;
					case 13:
						if (curChar == 39 && kind > 14) {
							kind = 14;
						}
						break;
					case 15:
						if ((0x8400000000L & l) != 0L) {
							jjCheckNAdd(13);
						}
						break;
					case 16:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAddTwoStates(17, 13);
						}
						break;
					case 17:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAdd(13);
						}
						break;
					case 18:
						if ((0xf000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 19;
						}
						break;
					case 19:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAdd(17);
						}
						break;
					case 20:
						if (curChar == 34) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 21:
						if ((0xfffffffbffffdbffL & l) != 0L) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 23:
						if ((0x8400000000L & l) != 0L) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 24:
						if (curChar == 34 && kind > 15) {
							kind = 15;
						}
						break;
					case 25:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAddStates(30, 33);
						}
						break;
					case 26:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 27:
						if ((0xf000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 28;
						}
						break;
					case 28:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAdd(26);
						}
						break;
					case 41:
						if (curChar != 36) {
							break;
						}
						if (kind > 180) {
							kind = 180;
						}
						jjCheckNAdd(42);
						break;
					case 43:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(0, 6);
						}
						break;
					case 44:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddTwoStates(44, 45);
						}
						break;
					case 45:
						if (curChar != 46) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(34, 36);
						break;
					case 46:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(34, 36);
						break;
					case 48:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(49);
						}
						break;
					case 49:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(37, 39);
						break;
					case 51:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddTwoStates(51, 52);
						}
						break;
					case 53:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(54);
						}
						break;
					case 54:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAddStates(40, 42);
						break;
					case 56:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(43, 45);
						}
						break;
					case 58:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(59);
						}
						break;
					case 59:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(46, 48);
						}
						break;
					case 61:
						if (curChar != 48) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAddStates(17, 20);
						break;
					case 63:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAddStates(49, 51);
						break;
					case 65:
						if ((0xff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAddStates(52, 54);
						break;
					case 67:
						if (curChar == 47) {
							jjAddStates(7, 8);
						}
						break;
					case 69:
						if ((0xffffffffffffdbffL & l) != 0L) {
							jjCheckNAddStates(21, 23);
						}
						break;
					case 70:
						if ((0x2400L & l) != 0L && kind > 130) {
							kind = 130;
						}
						break;
					case 71:
						if (curChar == 10 && kind > 130) {
							kind = 130;
						}
						break;
					case 72:
						if (curChar == 13) {
							jjstateSet[jjnewStateCnt++] = 71;
						}
						break;
					case 73:
						if (curChar == 42) {
							jjCheckNAddTwoStates(74, 75);
						}
						break;
					case 74:
						if ((0xfffffbffffffffffL & l) != 0L) {
							jjCheckNAddTwoStates(74, 75);
						}
						break;
					case 75:
						if (curChar == 42) {
							jjCheckNAddStates(55, 57);
						}
						break;
					case 76:
						if ((0xffff7bffffffffffL & l) != 0L) {
							jjCheckNAddTwoStates(77, 75);
						}
						break;
					case 77:
						if ((0xfffffbffffffffffL & l) != 0L) {
							jjCheckNAddTwoStates(77, 75);
						}
						break;
					case 78:
						if (curChar == 47 && kind > 131) {
							kind = 131;
						}
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 38:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 180) {
								kind = 180;
							}
							jjCheckNAdd(42);
						}
						if (curChar == 101) {
							jjstateSet[jjnewStateCnt++] = 37;
						}
						break;
					case 37:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 180) {
								kind = 180;
							}
							jjCheckNAdd(42);
						}
						if (curChar == 115) {
							jjstateSet[jjnewStateCnt++] = 36;
						}
						break;
					case 0:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 180) {
								kind = 180;
							}
							jjCheckNAdd(42);
						}
						if (curChar == 114) {
							jjstateSet[jjnewStateCnt++] = 38;
						} else if (curChar == 95) {
							jjstateSet[jjnewStateCnt++] = 29;
						}
						break;
					case 29:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 180) {
								kind = 180;
							}
							jjCheckNAdd(42);
						}
						if (curChar == 95) {
							jjstateSet[jjnewStateCnt++] = 39;
						}
						break;
					case 79:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 180) {
								kind = 180;
							}
							jjCheckNAdd(42);
						}
						if (curChar == 114) {
							jjstateSet[jjnewStateCnt++] = 38;
						}
						break;
					case 2:
					case 64:
					case 66:
						if ((0x20000000200000L & l) == 0L) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAdd(3);
						break;
					case 3:
						if ((0x100000001000L & l) != 0L && kind > 8) {
							kind = 8;
						}
						break;
					case 6:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(58, 59);
						}
						break;
					case 9:
					case 50:
					case 55:
						if ((0x100000001000L & l) == 0L) {
							break;
						}
						if (kind > 12) {
							kind = 12;
						}
						jjCheckNAdd(10);
						break;
					case 10:
						if ((0x5000000050L & l) != 0L && kind > 12) {
							kind = 12;
						}
						break;
					case 12:
						if ((0xffffffffefffffffL & l) != 0L) {
							jjCheckNAdd(13);
						}
						break;
					case 14:
						if (curChar == 92) {
							jjAddStates(60, 62);
						}
						break;
					case 15:
						if ((0x14404410000000L & l) != 0L) {
							jjCheckNAdd(13);
						}
						break;
					case 21:
						if ((0xffffffffefffffffL & l) != 0L) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 22:
						if (curChar == 92) {
							jjAddStates(63, 65);
						}
						break;
					case 23:
						if ((0x14404410000000L & l) != 0L) {
							jjCheckNAddStates(9, 11);
						}
						break;
					case 30:
						if (curChar != 116) {
							break;
						}
						if (kind > 23) {
							kind = 23;
						}
						jjstateSet[jjnewStateCnt++] = 32;
						break;
					case 31:
						if (curChar == 95 && kind > 23) {
							kind = 23;
						}
						break;
					case 32:
						if (curChar == 95) {
							jjstateSet[jjnewStateCnt++] = 31;
						}
						break;
					case 33:
						if (curChar == 99) {
							jjstateSet[jjnewStateCnt++] = 30;
						}
						break;
					case 34:
						if (curChar == 105) {
							jjstateSet[jjnewStateCnt++] = 33;
						}
						break;
					case 35:
						if (curChar == 114) {
							jjstateSet[jjnewStateCnt++] = 34;
						}
						break;
					case 36:
						if (curChar == 116) {
							jjstateSet[jjnewStateCnt++] = 35;
						}
						break;
					case 39:
						if (curChar == 114) {
							jjstateSet[jjnewStateCnt++] = 38;
						}
						break;
					case 40:
						if (curChar == 95) {
							jjstateSet[jjnewStateCnt++] = 29;
						}
						break;
					case 41:
						if ((0x7fffffe87fffffeL & l) == 0L) {
							break;
						}
						if (kind > 180) {
							kind = 180;
						}
						jjCheckNAdd(42);
						break;
					case 42:
						if ((0x7fffffe87fffffeL & l) == 0L) {
							break;
						}
						if (kind > 180) {
							kind = 180;
						}
						jjCheckNAdd(42);
						break;
					case 47:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(66, 67);
						}
						break;
					case 52:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(68, 69);
						}
						break;
					case 57:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(70, 71);
						}
						break;
					case 60:
						if ((0x100000001000L & l) != 0L) {
							jjCheckNAdd(10);
						}
						break;
					case 62:
						if ((0x100000001000000L & l) != 0L) {
							jjCheckNAdd(63);
						}
						break;
					case 63:
						if ((0x7e0000007eL & l) == 0L) {
							break;
						}
						if (kind > 8) {
							kind = 8;
						}
						jjCheckNAddStates(49, 51);
						break;
					case 69:
						jjAddStates(21, 23);
						break;
					case 74:
						jjCheckNAddTwoStates(74, 75);
						break;
					case 76:
					case 77:
						jjCheckNAddTwoStates(77, 75);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 12:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjstateSet[jjnewStateCnt++] = 13;
						}
						break;
					case 21:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjAddStates(9, 11);
						}
						break;
					case 69:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjAddStates(21, 23);
						}
						break;
					case 74:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjCheckNAddTwoStates(74, 75);
						}
						break;
					case 76:
					case 77:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjCheckNAddTwoStates(77, 75);
						}
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 79 - (jjnewStateCnt = startsAt))) {
				return curPos;
			}
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	static final int[] jjnextStates = { 44, 45, 51, 52, 56, 57, 10, 68, 73, 21, 22, 24, 12, 14, 1, 2, 3, 62, 65, 66, 3,
			69, 70, 72, 5, 6, 10, 8, 9, 10, 21, 22, 26, 24, 46, 47, 10, 49, 50, 10, 54, 55, 10, 56, 57, 10, 59, 60, 10,
			63, 64, 3, 65, 66, 3, 75, 76, 78, 7, 8, 15, 16, 18, 23, 25, 27, 48, 49, 53, 54, 58, 59, 55, 56, 58, 30, 31,
			37, 38, 42, 43, 10, 54, 59, 48, 51, 52, 3, 32, 33, 10, 35, 36, 10, 40, 41, 10, 42, 43, 10, 45, 46, 10, 49,
			50, 3, 51, 52, 3, 61, 62, 64, 34, 35, 39, 40, 44, 45, 58, 59, 61, 33, 34, 40, 41, 45, 46, 10, 57, 62, 51,
			54, 55, 3, 38, 39, 10, 43, 44, 10, 48, 49, 10, 52, 53, 3, 54, 55, 3, 64, 65, 67, 37, 38, 42, 43, 47, 48, 2,
			3, };

	/** Token literal values. */
	public static final String[] jjstrLiteralImages = { "", null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null,
			"\143\157\156\164\151\156\165\145", "\166\157\154\141\164\151\154\145", "\162\145\147\151\163\164\145\162",
			"\137\137\143\157\156\163\164", "\151\156\154\151\156\145", "\137\137\151\156\154\151\156\145",
			"\137\137\151\156\154\151\156\145\137\137", "\137\137\163\151\147\156\145\144",
			"\137\137\163\151\147\156\145\144\137\137", "\165\156\163\151\147\156\145\144",
			"\164\171\160\145\144\145\146", "\144\145\146\141\165\154\164", "\144\157\165\142\154\145",
			"\163\167\151\164\143\150", "\162\145\164\165\162\156", "\145\170\164\145\162\156",
			"\163\164\162\165\143\164", "\163\164\141\164\151\143", "\163\151\147\156\145\144", "\167\150\151\154\145",
			"\142\162\145\141\153", "\165\156\151\157\156", "\143\157\156\163\164", "\146\154\157\141\164",
			"\163\150\157\162\164", "\145\154\163\145", "\143\141\163\145", "\154\157\156\147", "\145\156\165\155",
			"\141\165\164\157", "\166\157\151\144", "\143\150\141\162", "\147\157\164\157", "\146\157\162",
			"\151\156\164", "\151\146", "\144\157", "\163\151\172\145\157\146",
			"\137\137\145\170\164\145\156\163\151\157\156\137\137", "\137\101\164\157\155\151\143",
			"\137\103\157\155\160\154\145\170", "\56\56\56", "\74\74\75", "\76\76\75", "\75\75", "\46\46", "\174\174",
			"\52\75", "\57\75", "\45\75", "\53\75", "\55\75", "\46\75", "\136\75", "\174\75", "\74\74", "\76\76",
			"\41\75", "\76\75", "\74\75", "\55\76", "\53\53", "\55\55", "\76", "\74", "\53", "\55", "\52", "\57", "\45",
			"\75", "\46", "\174", "\136", "\41", "\176", "\72", "\73", "\77", "\56", "\50", "\51", "\133", "\135",
			"\173", "\175", "\54", "\43", null, "\160\162\141\147\155\141", null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, "\12", "\15", null, null,
			null, null, "\157\155\160", null, "\160\141\162\141\154\154\145\154", "\163\145\143\164\151\157\156\163",
			"\163\145\143\164\151\157\156", "\163\151\156\147\154\145", "\157\162\144\145\162\145\144",
			"\155\141\163\164\145\162", "\143\162\151\164\151\143\141\154", "\141\164\157\155\151\143",
			"\142\141\162\162\151\145\162", "\146\154\165\163\150", "\156\157\167\141\151\164",
			"\163\143\150\145\144\165\154\145", "\144\171\156\141\155\151\143", "\147\165\151\144\145\144",
			"\162\165\156\164\151\155\145", "\156\157\156\145", "\162\145\144\165\143\164\151\157\156",
			"\160\162\151\166\141\164\145", "\146\151\162\163\164\160\162\151\166\141\164\145",
			"\154\141\163\164\160\162\151\166\141\164\145", "\143\157\160\171\160\162\151\166\141\164\145",
			"\163\150\141\162\145\144", "\143\157\160\171\151\156",
			"\164\150\162\145\141\144\160\162\151\166\141\164\145", "\156\165\155\137\164\150\162\145\141\144\163",
			"\143\157\154\154\141\160\163\145", "\162\145\141\144", "\167\162\151\164\145", "\165\160\144\141\164\145",
			"\143\141\160\164\165\162\145", "\164\141\163\153", "\164\141\163\153\167\141\151\164",
			"\144\145\143\154\141\162\145", "\164\141\163\153\171\151\145\154\144", "\165\156\164\151\145\144",
			"\155\145\162\147\145\141\142\154\145", "\151\156\151\164\151\141\154\151\172\145\162",
			"\146\151\156\141\154", null, null, null, };

	/** Lexer state names. */
	public static final String[] lexStateNames = { "DEFAULT", "AfterCrossbar", "Pragma", "Omp", "AfterAttrib", "Cpp", };

	/** Lex State array. */
	public static final int[] jjnewLexState = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 4,
			4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, -1, -1, -1, -1, -1,
			-1, 0, 0, 0, 0, -1, -1, -1, -1, 3, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, };
	static final long[] jjtoToken = { 0xffffffffff80d101L, 0x3ffffffffffffL, 0x1fffffffffd0c0L, };
	static final long[] jjtoSkip = { 0xfeL, 0x4000000000000000L, 0xf3fL, };
	static final long[] jjtoMore = { 0x7f0000L, 0xbffc000000000000L, 0x2000L, };
	protected SimpleCharStream input_stream;
	private final int[] jjrounds = new int[79];
	private final int[] jjstateSet = new int[158];
	private final StringBuilder jjimage = new StringBuilder();
	private StringBuilder image = jjimage;
	private int jjimageLen;
	private int lengthOfMatch;
	protected char curChar;

	/** Constructor. */
	public CParserTokenManager(SimpleCharStream stream) {
		if (SimpleCharStream.staticFlag) {
			throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
		}
		input_stream = stream;
	}

	/** Constructor. */
	public CParserTokenManager(SimpleCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	/** Reinitialise parser. */
	public void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	private void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 79; i-- > 0;) {
			jjrounds[i] = 0x80000000;
		}
	}

	/** Reinitialise parser. */
	public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	/** Switch to specified lex state. */
	public void SwitchTo(int lexState) {
		if (lexState >= 6 || lexState < 0) {
			throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		} else {
			curLexState = lexState;
		}
	}

	protected Token jjFillToken() {
		final Token t;
		final String curTokenImage;
		final int beginLine;
		final int endLine;
		final int beginColumn;
		final int endColumn;
		String im = jjstrLiteralImages[jjmatchedKind];
		curTokenImage = (im == null) ? input_stream.GetImage() : im;
		beginLine = input_stream.getBeginLine();
		beginColumn = input_stream.getBeginColumn();
		endLine = input_stream.getEndLine();
		endColumn = input_stream.getEndColumn();
		t = Token.newToken(jjmatchedKind, curTokenImage);

		t.beginLine = beginLine;
		t.endLine = endLine;
		t.beginColumn = beginColumn;
		t.endColumn = endColumn;

		return t;
	}

	int curLexState = 0;
	int defaultLexState = 0;
	int jjnewStateCnt;
	int jjround;
	int jjmatchedPos;
	int jjmatchedKind;

	/** Get the next Token. */
	public Token getNextToken() {
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				return matchedToken;
			}
			image = jjimage;
			image.setLength(0);
			jjimageLen = 0;

			for (;;) {
				switch (curLexState) {
				case 0:
					try {
						input_stream.backup(0);
						while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L) {
							curChar = input_stream.BeginToken();
						}
					} catch (java.io.IOException e1) {
						continue EOFLoop;
					}
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_0();
					break;
				case 1:
					try {
						input_stream.backup(0);
						while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L) {
							curChar = input_stream.BeginToken();
						}
					} catch (java.io.IOException e1) {
						continue EOFLoop;
					}
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_1();
					break;
				case 2:
					try {
						input_stream.backup(0);
						while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L) {
							curChar = input_stream.BeginToken();
						}
					} catch (java.io.IOException e1) {
						continue EOFLoop;
					}
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_2();
					if (jjmatchedPos == 0 && jjmatchedKind > 141) {
						jjmatchedKind = 141;
					}
					break;
				case 3:
					try {
						input_stream.backup(0);
						while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L) {
							curChar = input_stream.BeginToken();
						}
					} catch (java.io.IOException e1) {
						continue EOFLoop;
					}
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_3();
					break;
				case 4:
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_4();
					if (jjmatchedPos == 0 && jjmatchedKind > 22) {
						jjmatchedKind = 22;
					}
					break;
				case 5:
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_5();
					if (jjmatchedPos == 0 && jjmatchedKind > 127) {
						jjmatchedKind = 127;
					}
					break;
				}
				if (jjmatchedKind != 0x7fffffff) {
					if (jjmatchedPos + 1 < curPos) {
						input_stream.backup(curPos - jjmatchedPos - 1);
					}
					if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
						matchedToken = jjFillToken();
						if (jjnewLexState[jjmatchedKind] != -1) {
							curLexState = jjnewLexState[jjmatchedKind];
						}
						return matchedToken;
					} else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
						if (jjnewLexState[jjmatchedKind] != -1) {
							curLexState = jjnewLexState[jjmatchedKind];
						}
						continue EOFLoop;
					}
					MoreLexicalActions();
					if (jjnewLexState[jjmatchedKind] != -1) {
						curLexState = jjnewLexState[jjmatchedKind];
					}
					curPos = 0;
					jjmatchedKind = 0x7fffffff;
					try {
						curChar = input_stream.readChar();
						continue;
					} catch (java.io.IOException e1) {
					}
				}
				int error_line = input_stream.getEndLine();
				int error_column = input_stream.getEndColumn();
				String error_after = null;
				boolean EOFSeen = false;
				try {
					input_stream.readChar();
					input_stream.backup(1);
				} catch (java.io.IOException e1) {
					EOFSeen = true;
					error_after = curPos <= 1 ? "" : input_stream.GetImage();
					if (curChar == '\n' || curChar == '\r') {
						error_line++;
						error_column = 0;
					} else {
						error_column++;
					}
				}
				if (!EOFSeen) {
					input_stream.backup(1);
					error_after = curPos <= 1 ? "" : input_stream.GetImage();
				}
				throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
						TokenMgrError.LEXICAL_ERROR);
			}
		}
	}

	void MoreLexicalActions() {
		jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
		switch (jjmatchedKind) {
		case 16:
			image.append(input_stream.GetSuffix(jjimageLen));
			jjimageLen = 0;
			attributeMatchingParens = 0;
			break;
		case 17:
			image.append(input_stream.GetSuffix(jjimageLen));
			jjimageLen = 0;
			attributeMatchingParens = 0;
			break;
		case 18:
			image.append(input_stream.GetSuffix(jjimageLen));
			jjimageLen = 0;
			attributeMatchingParens = 0;
			break;
		case 19:
			image.append(input_stream.GetSuffix(jjimageLen));
			jjimageLen = 0;
			attributeMatchingParens = 0;
			break;
		case 20:
			image.append(input_stream.GetSuffix(jjimageLen));
			jjimageLen = 0;
			attributeMatchingParens++;
			break;
		case 21:
			image.append(input_stream.GetSuffix(jjimageLen));
			jjimageLen = 0;
			attributeMatchingParens--;
			if (attributeMatchingParens == 0) {
				SwitchTo(DEFAULT);
			}
			break;
		default:
			break;
		}
	}

	private void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	private void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	private void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	private void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

}
